)
yearCol$mean()$set('Year', img$get('year'));
})
for (index in 168:176) {
year_tp_data <- ee_extract(
x = annualMonthlyMeanCol,
y = ee_world_by_countries[[index]],
scale = 2500
)
write.csv(year_tp_data, sprintf("%s.csv", as.character(World$name[index])))
}
library(tidyverse)
library(plotly)
library(raster)
library(mapview)
library(mapedit)
library(sf)
mapviewOptions(fgb = FALSE)
tower_airport <- read_sf("data/tower_aiport.geojson")
airport <- read_sf("data/airport.geojson")
new_airport <- read_sf("data/extension_airport.geojson")
setwd("/home/csaybar/Documents/Github/digitalearth/assigments/spatial_analisys/assigment_06/")
tower_airport <- read_sf("data/tower_aiport.geojson")
airport <- read_sf("data/airport.geojson")
new_airport <- read_sf("data/extension_airport.geojson")
map_01 <- function() {
airport$name <- "Current <strong>Deniliquin</strong> airport"
new_airport$name <- "Planned extension"
tower_airport$name <- "Tower"
mapview(st_cast(airport, "LINESTRING"), color = "black") +
mapview(st_cast(new_airport, "LINESTRING"), color = "red") +
mapview(tower_airport, zcol = "name")
}
map_02 <- function() {
tower_airport$name <- "Tower"
viz_list <- list.files("data/viz/", full.names = TRUE)
altq_tower <- gsub("\\.tif$|viz_", "", basename(viz_list)) %>% as.numeric()
# rviz <- sum(stack(lapply(viz_list, raster)))
# writeRaster(rviz, "data/viz_sum.tif")
rviz <- raster("data/viz_sum.tif")
mapview(tower_airport, zcol = "name")+
mapview(rviz, na.color = "#FFFFFF00", layer.name = "Visual impact")
}
tower_airport$name <- "Tower"
viz_list <- list.files("data/viz/", full.names = TRUE)
altq_tower <- gsub("\\.tif$|viz_", "", basename(viz_list)) %>% as.numeric()
# rviz <- sum(stack(lapply(viz_list, raster)))
# writeRaster(rviz, "data/viz_sum.tif")
rviz <- raster("data/viz_sum.tif")
mapview(tower_airport, zcol = "name")+
mapview(rviz, na.color = "#FFFFFF00", layer.name = "Visual impact")
mapview(st_cast(airport, "LINESTRING"), color = "black") +
mapview(st_cast(new_airport, "LINESTRING"), color = "red") +
mapview(tower_airport, zcol = "name")+
mapview(rviz, na.color = "#FFFFFF00", layer.name = "Visual impact")
rviz
airport$name <- "Current <strong>Deniliquin</strong> airport"
new_airport$name <- "Planned extension"
tower_airport$name <- "Tower"
viz_list <- list.files("data/viz/", full.names = TRUE)
altq_tower <- gsub("\\.tif$|viz_", "", basename(viz_list)) %>% as.numeric()
# rviz <- sum(stack(lapply(viz_list, raster)))
# writeRaster(rviz, "data/viz_sum.tif")
rviz <- raster("data/viz_sum.tif")
mapview(st_cast(airport, "LINESTRING"), color = "black") +
mapview(st_cast(new_airport, "LINESTRING"), color = "red") +
mapview(tower_airport, zcol = "name")+
mapview(rviz, na.color = "#FFFFFF00", layer.name = "Visual impact")
map_02 <- function() {
airport$name <- "Current <strong>Deniliquin</strong> airport"
new_airport$name <- "Planned extension"
tower_airport$name <- "Tower"
viz_list <- list.files("data/viz/", full.names = TRUE)
altq_tower <- gsub("\\.tif$|viz_", "", basename(viz_list)) %>% as.numeric()
# rviz <- sum(stack(lapply(viz_list, raster)))
# writeRaster(rviz, "data/viz_sum.tif")
rviz <- raster("data/viz_sum.tif")
mapview(st_cast(airport, "LINESTRING"), color = "black") +
mapview(st_cast(new_airport, "LINESTRING"), color = "red") +
mapview(tower_airport, zcol = "name")+
mapview(rviz, na.color = "#FFFFFF00", layer.name = "Visual impact")
}
mapviewGetOption("mapview.maxpixels")
5*10**6
mapview(st_cast(airport, "LINESTRING"), color = "black") +
mapview(st_cast(new_airport, "LINESTRING"), color = "red") +
mapview(tower_airport, zcol = "name")+
mapview(rviz, na.color = "#FFFFFF00", layer.name = "Visual impact", maxpixels = 5*10**6)
mapview(st_cast(airport, "LINESTRING"), color = "black") +
mapview(st_cast(new_airport, "LINESTRING"), color = "red") +
mapview(tower_airport, zcol = "name")+
mapview(rviz, na.color = "#FFFFFF00", layer.name = "Visual impact", maxpixels = 10*10**6)
grDevices::hcl.colors
mapviewOptions(raster.palette = grDevices::hcl.colors(10, palette = "viridis"))
mapview(st_cast(airport, "LINESTRING"), color = "black") +
mapview(st_cast(new_airport, "LINESTRING"), color = "red") +
mapview(tower_airport, zcol = "name")+
mapview(rviz, na.color = "#FFFFFF00", layer.name = "Visual impact", maxpixels = 10**3)
mapview(st_cast(airport, "LINESTRING"), color = "black") +
mapview(st_cast(new_airport, "LINESTRING"), color = "red") +
mapview(tower_airport, zcol = "name")+
mapview(rviz, na.color = "#FFFFFF00", layer.name = "Visual impact", maxpixels = 10**6)
mapview(st_cast(airport, "LINESTRING"), color = "black") +
mapview(st_cast(new_airport, "LINESTRING"), color = "red") +
mapview(tower_airport, zcol = "name")+
mapview(rviz, na.color = "#FFFFFF00", layer.name = "Visual impact", maxpixels = 10**7)
m1 <- mapviewOptions(raster.palette = grDevices::hcl.colors(10, palette = "viridis"))
m1 <-  mapview(st_cast(airport, "LINESTRING"), color = "black") +
mapview(st_cast(new_airport, "LINESTRING"), color = "red") +
mapview(tower_airport, zcol = "name")+
mapview(rviz, na.color = "#FFFFFF00", layer.name = "Visual impact", maxpixels = 10**7)
m1
m1
m1 + leaflet::setView(144.97586, -35.55765, 13)
m1@map + leaflet::setView(144.97586, -35.55765, 13)
m1@map %>%  leaflet::setView(144.97586, -35.55765, 13)
m1@map %>%  leaflet::setView(144.94586, -35.55765, 13)
m1@map %>%  leaflet::setView(144.95586, -35.55765, 13)
m1@map %>%  leaflet::setView(144.96586, -35.55765, 13)
library(sp)
library(sf)
library(gstat)
library(plotly)
library(raster)
library(leaflet)
library(ggplot2)
library(mapview)
library(rasterVis)
source("functions.R")
m4 <- m3 | m2
mapview::mapviewOutput()
mapview::mapviewGetOption()
mapview::mapviewOptions(fgb = FALSE)
library(sp)
library(sf)
library(gstat)
library(plotly)
library(raster)
library(leaflet)
library(ggplot2)
library(mapview)
library(rasterVis)
source("functions.R")
mapview::mapviewOptions(fgb = FALSE)
meuse <- create_meuse()
zinc_map <- suppressMessages(
suppressWarnings(
zinc_kriging()
)
)
na.color <- "#FFFFFF00"
m2 <- suppressWarnings(
mapview(
x = zinc_map[[1]],
alpha.regions = 1,
legend = TRUE,
na.color = na.color,
layer.name = "prediction"
)
)
m3 <- suppressWarnings(
mapview(
x = zinc_map[[2]],
alpha.regions = 1,
legend = TRUE,
na.color = na.color,
layer.name = "variance"
)
)
m4 <- m3 | m2
m4@map
m4
m2
m3
m3 | m2
m3 | m2
m3
m2
m3 | m2
m3@map | m2
m3@map | m2@map
m3 | m2
m2 <- suppressWarnings(
mapview(
x = zinc_map[[1]],
alpha.regions = 1,
legend = FALSE,
na.color = na.color,
layer.name = "prediction"
)
)
m3 <- suppressWarnings(
mapview(
x = zinc_map[[2]],
alpha.regions = 1,
legend = FALSE,
na.color = na.color,
layer.name = "variance"
)
)
m4 <- m3 | m2
m4
m3
m2
m3
m2
m3 | m2
m3
remotes::install_github("r-spatial/mapview")
m3 | m2
m2 <- suppressWarnings(
mapview(
x = zinc_map[[1]],
alpha.regions = 1,
legend = FALSE,
na.color = na.color,
layer.name = "prediction"
)
)
m3 <- suppressWarnings(
mapview(
x = zinc_map[[2]],
alpha.regions = 1,
legend = FALSE,
na.color = na.color,
layer.name = "variance"
)
)
m3 | m2
mapview::`.__T__|:base`
mapview::`.__T__names:base`
m3 | m2
m3
m2
m3 | mapview()
mapview()
mapview() | mapview()
library(dplyr)
library(sf)
franconia %>%
sf::st_union() %>%
mapview()
dd <-franconia %>%
sf::st_union() %>%
mapview()
dd | dd
dd | m3
m3
dd | m3
dd
dd | m3
m3 + m2
library(googleCloudStorageR)
library(reticulate)
library(leaflet)
library(leafem)
library(raster)
library(stars)
library(sf)
create_tile_ <- function(raster) {
tf1 <- paste0(tempfile(), ".tif")
writeRaster(raster, tf1, overwrite = TRUE)
convert_to_cog_single(tf1)
# from local to gcs
gcs_global_bucket("rgee_dev")
gcs_id <- rgee::local_to_gcs(tf1, bucket = "rgee_dev")
googleCloudStorageR::gcs_update_object_acl(basename(gcs_id),
bucket = gcs_get_global_bucket(),
entity_type = "allUsers")
gcs_id_dev <- googleCloudStorageR::gcs_download_url(basename(gcs_id))
r <- requests$get(
url = sprintf("%s/cog/tilejson.json", titiler_server),
params = list(
url = gcs_id_dev,
assets = "pan",
minzoom = 8L,  # By default titiler will use 0
maxzoom = 14L # By default titiler will use 24
)
)$json()
}
create_watershed_and_rivers <- function(codes) {
catchments <- read_sf("data/catchments.shp")
# basin
cselected <- catchments[catchments$HZB_CODE %in%  codes, ] %>%
st_cast("POLYGON") %>%
"["("FID")
# rivers
rivers <- read_sf("data/stream.shp") %>%
st_intersection(cselected) %>%
"["("FID")
list(basin = cselected, river = rivers)
}
download_dem <- function(basin) {
ee_cselected <- sf_as_ee(basin)
dem_data <- dem_alos$select("AVE_DSM")$clip(ee_cselected)
dem_raster <- ee_as_raster(dem_data, ee_cselected$geometry(), dsn = "data/dem.tif")
dem_raster[dem_raster<=0]=NA
dem_raster[[1]]
}
create_dem_range <- function(dem_raster) {
ee_intervals <- seq(minValue(dem_raster), maxValue(dem_raster), 200)
ee_intervals[1] <- ee_intervals[1] - 300
ee_intervals[length(ee_intervals)] <- ee_intervals[length(ee_intervals)] + 300
intervalss <- lapply(1:(length(ee_intervals) -1), function(x) c(ee_intervals[x:(x+1)], x)) %>%
do.call(c, .)
intervalss_to_text <- lapply(1:(length(ee_intervals) -1), function(x) paste0(ee_intervals[x:(x+1)], collapse = "-")) %>%
do.call(c, .)
ele_class <- reclassify(dem_raster, intervalss)
dem_areas <- st_as_stars(ele_class) %>%
st_as_sf(merge = TRUE) %>% # this is the raster to polygons part
st_cast("POLYGON")
# remove very small polygons
dem_areas <- dem_areas[st_area(dem_areas) %>% as.numeric() > 1000, ] %>%
sfheaders::sf_remove_holes() %>%
as("Spatial")
factor_values <- factor(dem_areas$dem)
levels(factor_values) <- intervalss_to_text
dem_areas$dem_range <- factor_values %>% as.character()
dem_areas
}
question_01_01 <- function() {
codes <- "2  8272285 42 0 0 0 0"
results_sf <- create_watershed_and_rivers(codes = codes)
basin <- results_sf$basin
# 3. rivers
# dem_raster <- download_dem(basin)
dem_raster <- raster("data/dem.tif")
dem_raster[dem_raster <= 0] = NA
# Question NÂ°1
slope <- terrain(dem_raster, unit = "degrees")
slope[is.nan(slope)] = NA
# plot(slope)
basinX <- basin %>% st_cast("LINESTRING")
m1 <- mapview::mapview(slope, na.color = "#FFFFFF00")
m2 <- mapview::mapview(basinX$geometry, color = "black", lwd = 3.5)
m2 + m1
}
question_01_02 <- function() {
dem_raster <- raster("data/dem.tif")
dem_raster[dem_raster <= 0] = NA
slope <- terrain(dem_raster, unit = "degrees")
slope[is.nan(slope)] = NA
hist(slope, main="", xlab="Values")
}
question_02_00 <- function() {
codes <- "2  8272285 42 0 0 0 0"
results_sf <- create_watershed_and_rivers(codes = codes)
basin <- results_sf$basin
basinX <- basin %>% st_cast("LINESTRING") %>% '['("geometry")
pal <- colorRampPalette(c("red", "white", "blue"))
no_curvature <- raster("data/profile_curvature.tif")*1
no_curvature <- scale(no_curvature)
relative_slope_position <- mask(no_curvature, as(basin, "Spatial"))
m1 <- mapview::mapview(
relative_slope_position,
na.color = "#FFFFFF00",
col.regions = pal(100),
at = seq(-4,4,0.5),
layer.name="profile curvature")
m2 <- mapview::mapview(basinX$geometry, color = "black", lwd = 3.5)
(m2 + m1)
}
question_02_01 <- function() {
codes <- "2  8272285 42 0 0 0 0"
results_sf <- create_watershed_and_rivers(codes = codes)
basin <- results_sf$basin
basinX <- basin %>% st_cast("LINESTRING") %>% '['("geometry")
pal <- colorRampPalette(c("red", "white", "blue"))
dem_raster <- raster("data/dem.tif")
dem_raster[dem_raster <= 0] = NA
no_curvature <- terrain(dem_raster, "tpi", unit = "degrees")
no_curvature[is.nan(no_curvature)] = NA
relative_slope_position <- mask(no_curvature, as(basin, "Spatial"))
m1 <- mapview::mapview(relative_slope_position, na.color = "#FFFFFF00",
layer.name="TPI",
col.regions = pal(100))
m2 <- mapview::mapview(basinX$geometry, color = "black", lwd = 3.5)
(m2 + m1)
}
question_03_01 <- function() {
dem_raster <- raster("data/dem.tif")
dem_raster[dem_raster <= 0] = NA
slope <- terrain(dem_raster, unit = "degrees")
slope[is.nan(slope)] = NA
dem_ranges <- create_dem_range(dem_raster)
dem_areas_slope <- raster::extract(slope, dem_ranges, fun = mean, na.rm = TRUE, sp = TRUE)
m1 <- mapview::mapview(dem_areas_slope, zcol = "slope", layer.name = "Slope - DEM each 200 meters.")
m1
}
question_03_02 <- function() {
dem_raster <- raster("data/dem.tif")
dem_raster[dem_raster <= 0] = NA
slope <- terrain(dem_raster, unit = "degrees")
slope[is.nan(slope)] = NA
dem_ranges <- create_dem_range(dem_raster)
dem_areas_slope <- raster::extract(slope, dem_ranges, fun = mean, na.rm = TRUE, sp = TRUE)
to_display <- dem_areas_slope[,2:3]@data
to_display$dem_mean <- unlist(lapply(strsplit(to_display$dem_range,"-"), function(x) mean(as.numeric(x))))
plot(to_display$dem_mean, to_display$slope, ylab="slope", xlab = "dem", lwd=5, pch=19)
lines(to_display$dem_mean, to_display$slope)
}
question_03_03 <- function() {
dem_raster <- raster("data/dem.tif")
dem_raster[dem_raster <= 0] = NA
slope <- terrain(dem_raster, unit = "degrees")
slope[is.nan(slope)] = NA
codes <- "2  8272285 42 0 0 0 0"
results_sf <- create_watershed_and_rivers(codes = codes)
basin <- results_sf$basin
basinX <- basin %>% st_cast("LINESTRING") %>% '['("geometry")
m1 <- mapview::mapview(slope, na.color = "#FFFFFF00", layer.name = "slope_100", legend = FALSE)
m2 <- mapview::mapview(basinX$geometry, layer.name = "borders", color = "black", lwd = 3.5)
m3 <- (m2 + m1)
m4 <- mapview::mapview(raster::aggregate(slope, fact=4), na.color = "#FFFFFF00",
layer.name = "slope_1000", legend = FALSE)
m5 <- (m2 + m4)
m3 + m5
}
question_03_04 <- function() {
library(ggplot2)
library(plotly)
dem_raster <- raster("data/dem.tif")
dem_raster[dem_raster <= 0] = NA
slope <- terrain(dem_raster, unit = "degrees")
slope[is.nan(slope)] = NA
slope30 <- data.frame(values = na.omit(raster::getValues(slope)))
slope120 <- data.frame(values = na.omit(raster::getValues(raster::aggregate(slope, fact=4))))
slope30$class <- 'slope 30'
slope120$class <- 'slope 120'
final_db <- rbind(slope30, slope120)
m1 <- ggplot(final_db, aes(values, fill = class)) + geom_density(alpha = 0.2)
ggplotly(m1)
}
dem_raster <- raster("data/dem.tif")
setwd("/home/csaybar/Documents/Github/digitalearth/assigments/spatial_analisys/assigment_05/")
dem_raster <- raster("data/dem.tif")
dem_raster[dem_raster <= 0] = NA
slope <- terrain(dem_raster, unit = "degrees")
slope[is.nan(slope)] = NA
dem_ranges <- create_dem_range(dem_raster)
dem_areas_slope <- raster::extract(slope, dem_ranges, fun = mean, na.rm = TRUE, sp = TRUE)
to_display <- dem_areas_slope[,2:3]@data
to_display$dem_mean <- unlist(lapply(strsplit(to_display$dem_range,"-"), function(x) mean(as.numeric(x))))
plot(to_display$dem_mean, to_display$slope, ylab="slope", xlab = "dem", lwd=5, pch=19)
lines(to_display$dem_mean, to_display$slope)
dem_raster <- raster("data/dem.tif")
dem_raster[dem_raster <= 0] = NA
slope <- terrain(dem_raster, unit = "degrees")
slope[is.nan(slope)] = NA
codes <- "2  8272285 42 0 0 0 0"
results_sf <- create_watershed_and_rivers(codes = codes)
basin <- results_sf$basin
basinX <- basin %>% st_cast("LINESTRING") %>% '['("geometry")
m1 <- mapview::mapview(slope, na.color = "#FFFFFF00", layer.name = "slope_100", legend = FALSE)
m2 <- mapview::mapview(basinX$geometry, layer.name = "borders", color = "black", lwd = 3.5)
m3 <- (m2 + m1)
m4 <- mapview::mapview(raster::aggregate(slope, fact=4), na.color = "#FFFFFF00",
layer.name = "slope_1000", legend = FALSE)
m5 <- (m2 + m4)
m3 + m5
m3 | m5
m3@map | m5@map
m3@map
m3 | m5
m1 <- ggplot(final_db, aes(values, fill = class)) + geom_density(alpha = 0.2)
library(ggplot2)
library(plotly)
dem_raster <- raster("data/dem.tif")
dem_raster[dem_raster <= 0] = NA
slope <- terrain(dem_raster, unit = "degrees")
slope[is.nan(slope)] = NA
slope30 <- data.frame(values = na.omit(raster::getValues(slope)))
slope120 <- data.frame(values = na.omit(raster::getValues(raster::aggregate(slope, fact=4))))
slope30$class <- 'slope 30'
slope120$class <- 'slope 120'
final_db <- rbind(slope30, slope120)
m1 <- ggplot(final_db, aes(values, fill = class)) + geom_density(alpha = 0.2)
m1
m1 +theme_bw()
m1 + theme_classic()
m1 <- ggplot(final_db, aes(values, fill = class)) + geom_density(alpha = 0.2)  + theme_classic()
ggplotly(m1)
codes <- "2  8272285 42 0 0 0 0"
results_sf <- create_watershed_and_rivers(codes = codes)
basin <- results_sf$basin
basin <- results_sf$basin
# 3. rivers
# dem_raster <- download_dem(basin)
dem_raster <- raster("data/dem.tif")
dem_raster[dem_raster <= 0] = NA
# Question NÂ°1
slope <- terrain(dem_raster, unit = "degrees")
slope[is.nan(slope)] = NA
# plot(slope)
basinX <- basin %>% st_cast("LINESTRING")
m1 <- mapview::mapview(slope, na.color = "#FFFFFF00")
m2 <- mapview::mapview(basinX$geometry, color = "black", lwd = 3.5)
m2 + m1
m1 <- mapview::mapview(results_sf$river, na.color = "#FFFFFF00")
m1
m1 <- mapview::mapview(results_sf$river, color = "blue")
m1
m3 <- mapview::mapview(results_sf$river, color = "blue")
m3 <- mapview::mapview(results_sf$river, color = "blue", legend=FALSE)
m3 <- mapview::mapview(results_sf$river, color = "blue", legend=FALSE)
m3
m2 + m1
m1 <- mapview::mapview(slope, na.color = "#FFFFFF00")
m1
m2 <- mapview::mapview(basinX$geometry, color = "black", lwd = 3.5)
m3 <- mapview::mapview(results_sf$river, color = "blue", legend=FALSE)
m2 + m1 + m3
