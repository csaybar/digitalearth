# 6. Of course it is also possible to combine spatial operations and filters. What is
#    the average size of all buildings, which are within 1km distance to the fortress
#    (including the fortress itself)? Make a screenshot, which shows the query and
#    the result. and explain in your own words how the query works.
query_03_01 <- "SELECT AVG(ST_Area(b.geometry))" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) <= 1000;"
slzg_df_avg2 <- st_read(con, query = query_03_01)
slzg_df_avg2
as.character(na.omit(ddd$name)) == "Glockenturm"
# 6. Of course it is also possible to combine spatial operations and filters. What is
#    the average size of all buildings, which are within 1km distance to the fortress
#    (including the fortress itself)? Make a screenshot, which shows the query and
#    the result. and explain in your own words how the query works.
query_03_01 <- "SELECT AVG(ST_Area(b.geometry))" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 1000;"
ddd <- read_sf(files_in[index])
as.character(na.omit(ddd$name)) == "Glockenturm"
temps2019 <- ee$ImageCollection('LANDSAT/LC08/C01/T1_32DAY_TOA')
temps2019 <- ee$ImageCollection('LANDSAT/LC08/C01/T1_32DAY_TOA')$
filterDate ('2019-01-01', '2020-01-01')$
filterMetadata("CLOUD_COVER", "less_than", 30)$
select('B11')
library(rgee)
ee_Initialize()
temps2019 <- ee$ImageCollection('LANDSAT/LC08/C01/T1_32DAY_TOA')$
filterDate ('2019-01-01', '2020-01-01')$
filterMetadata("CLOUD_COVER", "less_than", 30)$
select('B11')
temps2019
temps2019 <- ee$ImageCollection('LANDSAT/LC08/C01/T1_32DAY_TOA')$
filterDate ('2019-01-01', '2020-01-01')
temps2019$propertyNames()$getInfo()
temps2019
temps2019$first()$propertyNames()$getInfo()
temps2019 <- ee$ImageCollection("LANDSAT/LC08/C01/T1_SR")$
filterDate ('2019-01-01', '2020-01-01')$
filterMetadata("CLOUD_COVER", "less_than", 30)$
select('B11')
temps2019$first()$propertyNames()$getInfo()
temps2019 <- ee$ImageCollection("LANDSAT/LC08/C01/T1_SR")$
filterDate ('2019-01-01', '2020-01-01')$
filterMetadata("CLOUD_COVER", "less_than", 30)$
select('B11')
temps2019$size()$getInfo()
temps2019 <- ee$ImageCollection("LANDSAT/LC08/C01/T1_SR")$
filterDate ('2019-01-01', '2020-01-01')$
filterMetadata("CLOUD_COVER", "less_than", 30)$
select('B11')$
map(function(img) img$multiply(0.1)$substract(273.15))
temps2019 <- ee$ImageCollection("LANDSAT/LC08/C01/T1_SR")$
filterDate ('2019-01-01', '2020-01-01')$
filterMetadata("CLOUD_COVER", "less_than", 30)$
select('B11')$
map(function(img) img$multiply(0.1)$subtract(273.15))
temps2019 <- ee$ImageCollection("LANDSAT/LC08/C01/T1_SR")$
filterDate ('2019-01-01', '2020-01-01')$
filterMetadata("CLOUD_COVER", "less_than", 30)$
select('B11')$
map(function(img) img$multiply(0.1)$subtract(273.15)$copyProperties(img))
temps2019$size()$getInfo()
knitr::opts_chunk$set(echo = TRUE)
# Create the external file
img <- htmltools::img(src = "https://user-images.githubusercontent.com/16768318/96349562-be6c7700-10b0-11eb-973d-ce55906dcf7e.jpeg",
alt = 'logo',
width="10%",
style = 'position:absolute; top:50px; right:1%; padding:10px;z-index:200;')
htmlhead <- paste0('
<script>
document.write(\'<div class="logos">',img,'</div>\')
</script>
')
readr::write_lines(htmlhead, path = "header.html")
library("RPostgreSQL")
source("../postgis/utils.R") # Utils to use POSTGIS with R!
drv <- dbDriver("PostgreSQL") # load the PostgreSQL driver
con <- RPostgreSQL::dbConnect(
drv = drv,
dbname = "spdb_course",
host = "localhost",
user = "csaybar",
password = "csaybar",
port = 5432
)
slzg_church
# 4. Repeat the query with all buildings, which are of type church and then repeat
#    the query to create a layer, which contains churches and schools.
query_01_01 <- "SELECT * FROM salzburg_buildings WHERE type='church';"
slzg_church <- st_read(con, query = query_01_01)
# 4. Repeat the query with all buildings, which are of type church and then repeat
#    the query to create a layer, which contains churches and schools.
library(sf)
# 4. Repeat the query with all buildings, which are of type church and then repeat
#    the query to create a layer, which contains churches and schools.
query_01_01 <- "SELECT * FROM salzburg_buildings WHERE type='church';"
slzg_church <- st_read(con, query = query_01_01)
slzg_church
plot(slzg_church)
plot(slzg_church["code"], main = "",
lwd=0.1, key.pos = NULL, reset = FALSE,
pal = viridis::viridis)
slzg_church["code"]
mapview::mapview(slzg_church["code"])
slzg_church
read_sf(files_in[index])
files_in
# 3. Save shapefiles in PostGIS
files_in <- list.files("data/","\\.shp$",full.names = TRUE)
read_sf(files_in[index])
read_sf(files_in[1])
st_crs(read_sf(files_in[1]))
ddd <- st_crs(read_sf(files_in[1]))
ddd$wkt
ddd$input
st_crs(ddd) <- "WGS 84 / UTM zone 33N"
ddd
ddd$epsg
slzg_church["code"]
display_sf <- slzg_church["code"]
st_crs(display_sf) <- 32633
mapview::mapview(display_sf)
display_sf <- slzg_church
st_crs(display_sf) <- 32633
mapview::mapview(display_sf)
slzg_cs
query_01_02 <- "SELECT * FROM salzburg_buildings WHERE type='church' OR type='school';"
slzg_cs <- st_read(con, query = query_01_02)
slzg_cs
display_sf <- slzg_church
st_crs(display_sf) <- 32633
mapview::mapview(display_sf)
query_01_02 <- "SELECT * FROM salzburg_buildings WHERE type='church' OR type='school';"
slzg_cs <- st_read(con, query = query_01_02)
slzg_cs
display_sf <- slzg_cs
st_crs(display_sf) <- 32633
mapview::mapview(display_sf)
slzg_distance
slzg_distance
query_02_02 <- "SELECT b.*, ST_Distance(b.geometry, g.geometry) as distance" %|%
" FROM salzburg_buildings as b," %|%
" (SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') as g;"
slzg_distance <- st_read(con, query = query_02_02)
slzg_distance <- st_read(con, query = query_02_02)
slzg_distance
slzg_distance
slzg_filename
slzg_filename <- sprintf("%s.shp", tempfile())
slzg_distance
query_02_03 <- "SELECT COUNT(b.*)" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 500;"
slzg_df <- st_read(con, query = query_02_03)
slzg_df
query_02_03 <- "SELECT b.*" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 500;"
slzg_df <- st_read(con, query = query_02_03)
slzg_df
plot(slzg_df)
slzg_df
slzg_df
display_sf <- slzg_df
display_sf
st_crs(display_sf) <- 32633
mapview::mapview(display_sf)
query_02_03 <- "SELECT COUNT(b.*)" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 500;"
slzg_df <- st_read(con, query = query_02_03)
slzg_df
query_03_01 <- "SELECT AVG(ST_Area(b.geometry))" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 1000;"
slzg_df_avg2 <- st_read(con, query = query_03_01)
slzg_df_avg2
# 6. Of course it is also possible to combine spatial operations and filters. What is
#    the average size of all buildings, which are within 1km distance to the fortress
#    (including the fortress itself)? Make a screenshot, which shows the query and
#    the result. and explain in your own words how the query works.
query_03_01 <- "SELECT AVG(ST_Area(b.geometry))" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 1000;"
slzg_df_avg <- st_read(con, query = query_03_01)
slzg_df_avg
# 6. Of course it is also possible to combine spatial operations and filters. What is
#    the average size of all buildings, which are within 1km distance to the fortress
#    (including the fortress itself)? Make a screenshot, which shows the query and
#    the result. and explain in your own words how the query works.
query_03_01 <- "SELECT AVG(ST_Area(b.geometry))" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 1000;"
slzg_df_avg <- st_read(con, query = query_03_01)
slzg_df_avg
slzg_df_avg$avg
library("RPostgreSQL")
library("sf")
source("../postgis/utils.R") # Utils to use POSTGIS with R!
# 1. load the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# 2. create a connection to the postgres database
con <- RPostgreSQL::dbConnect(
drv = drv,
dbname = "spdb_course",
host = "localhost",
user = "csaybar",
password = "csaybar",
port = 5432
)
# 3. Save shapefiles in PostGIS
files_in <- list.files("data/","\\.shp$",full.names = TRUE)
tables_names <- c("salzburg_buildings", "salzburg_districts", "salzburg_roads")
con
library("RPostgreSQL")
library("sf")
source("../postgis/utils.R") # Utils to use POSTGIS with R!
library("dbi")
library("DBI")
DBI::dbListTables(con)
DBI::dbListTables(con)
DBI::dbListTables(con)
# 2. create a connection to the postgres database
con <- RPostgreSQL::dbConnect(
drv = drv,
dbname = "spdb_course",
host = "localhost",
user = "csaybar",
password = "csaybar",
port = 5432
)
# 4. Repeat the query with all buildings, which are of type church and then repeat
#    the query to create a layer, which contains churches and schools.
query_01_01 <- "SELECT r.*, ST_Length(geom) as length FROM salzburg_roads as r;"
slzg_church <- st_read(con, query = query_01_01)
# 4. Repeat the query with all buildings, which are of type church and then repeat
#    the query to create a layer, which contains churches and schools.
query_01_01 <- "SELECT r.*, ST_Length(geom) as length FROM salzburg_roads as r;"
# 4. Repeat the query with all buildings, which are of type church and then repeat
#    the query to create a layer, which contains churches and schools.
query_01_01 <- "SELECT r.*, ST_Length(geometry) as length FROM salzburg_roads as r;"
slzg_church <- st_read(con, query = query_01_01)
slzg_church
plot(slzg_church)
plot(slzg_church$geometry)
plot(slzg_church$geometry)
plot(slzg_church$geometry)
%|%
%|%
query_01_02 <- "SELECT * FROM salzburg_buildings WHERE type='church' OR type='school';"
"d" %|% "d"
query_01_02 <-
"SELECT r.*," %|%
"CASE" %|%
"  WHEN ST_Length(geometry) <= 15 THEN 'very small'" %|%
"  WHEN ST_Length(geometry) > 15 AND ST_Length(geometry) <= 40 THEN 'small'" %|%
"  WHEN ST_Length(geometry) > 40 AND ST_Length(geometry) <= 80 THEN 'medium'" %|%
"  WHEN ST_Length(geometry) > 80 AND ST_Length(geometry) <= 150 THEN 'large'" %|%
"  WHEN ST_Length(geometry) > 150 THEN 'very large'" %|%
"END AS road_category" %|%
"FROM" %|%
" salzburg_roads AS r;"
slzg_cs <- st_read(con, query = query_01_02)
slzg_cs
slzg_cs$road_category
slzg_cs
# 5. Extend the query and add a column that contains the calculated
#    area of the houses.
query_02_01 <- "SELECT * FROM salzburg_roads" %|%
" WHERE fclass = 'motorway' OR fclass = 'motorway_link';"
slzg_area_school <- st_read(con, query = query_02_01)
slzg_area_school
plot(slzg_area_school)
query_02_02 <- "SELECT b.*, ST_Distance(m.geometry, b.geometry) as distance" %|%
" FROM salzburg_buildings as b," %|%
"  (SELECT ST_Union(geometry) AS geometry)" %|%
" FROM salzburg_roads" %|%
" WHERE fclass = 'motorway' OR fclass = 'motorway_link' as m"
query_02_02
slzg_distance <- st_read(con, query = query_02_02)
query_02_02 <- "SELECT b.*, ST_Distance(m.geometry, b.geometry) as distance" %|%
" FROM salzburg_buildings as b," %|%
"  (SELECT ST_Union(geometry) AS geometry)" %|%
" FROM salzburg_roads" %|%
" WHERE fclass = 'motorway' OR fclass = 'motorway_link' as m;"
slzg_distance <- st_read(con, query = query_02_02)
query_02_02 <- "SELECT b.*, ST_Distance(m.geometry, b.geometry) as distance" %|%
" FROM salzburg_buildings as b," %|%
"  (SELECT ST_Union(geometry) as geometry" %|%
"   FROM salzburg_roads" %|%
"   WHERE fclass = 'motorway' OR fclass = 'motorway_link') as m;"
slzg_distance <- st_read(con, query = query_02_02)
slzg_distance
"SELECT" %|%
"  r.*," %|%
"  ST_Buffer(r.geom, 20, 'endcap=flat') AS potential_noise" %|%
"FROM" %|%
"  salzburg_roads AS r;"
"SELECT" %|%
"  b.*" %|%
"FROM" %|%
"  salzburg_buildings AS b," %|%
"  ( SELECT" %|%
"      ST_Buffer(ST_Union(r.geometry), 20, 'endcap=flat') AS buffer" %|%
"    FROM " %|%
"      salzburg_roads AS r) AS n" %|%
"WHERE" %|%
"  ST_Intersects(n.buffer, b.geometry) IS FALSE"
query_03_01 <- "SELECT" %|%
"  b.*" %|%
"FROM" %|%
"  salzburg_buildings AS b," %|%
"  ( SELECT" %|%
"      ST_Buffer(ST_Union(r.geometry), 20, 'endcap=flat') AS buffer" %|%
"    FROM " %|%
"      salzburg_roads AS r) AS n" %|%
"WHERE" %|%
"  ST_Intersects(n.buffer, b.geometry) IS FALSE"
slzg_distance <- st_read(con, query = query_03_01)
slzg_distance
query_03_01 <- "SELECT" %|%
"  b.*" %|%
"FROM" %|%
"  salzburg_buildings AS b," %|%
"  ( SELECT" %|%
"      ST_Buffer(ST_Union(r.geometry), 20, 'endcap=flat') AS buffer" %|%
"    FROM " %|%
"      salzburg_roads AS r) AS n" %|%
"WHERE" %|%
"  ST_Intersects(n.buffer, b.geometry) IS FALSE"
slzg_distance <- st_read(con, query = query_03_01)
query_03_02 <-
"SELECT" %|%
"  ST_Buffer(ST_Union(r.geometry), 20, 'endcap=flat') AS buffer" %|%
"INTO  potential_noise" %|%
"FROM " %|%
"  salzburg_roads AS r;"
slzg_distance <- st_read(con, query = query_03_02)
query_03_02 <-
"SELECT" %|%
"  ST_Buffer(ST_Union(r.geometry), 20, 'endcap=flat') AS buffer" %|%
"INTO  potential_noise" %|%
"FROM " %|%
"  salzburg_roads AS r;"
query_03_02
slzg_distance
query_03_02 <-
"SELECT" %|%
"  ST_Buffer(ST_Union(r.geometry), 20, 'endcap=flat') AS buffer" %|%
"INTO  potential_noise" %|%
"FROM " %|%
"  salzburg_roads AS r;"
slzg_distance <- st_read(con, query = query_03_02)
query_03_02 <-
"SELECT" %|%
"  ST_Buffer(ST_Union(r.geometry), 20, 'endcap=flat') AS buffer" %|%
"INTO  potential_noise" %|%
"FROM " %|%
"  salzburg_roads AS r;"
"SELECT" %|%
"  ST_Buffer(ST_Union(r.geometry), 20, 'endcap=flat') AS buffer"
query_03_02 <-
"SELECT" %|%
"  ST_Buffer(ST_Union(r.geometry), 20, 'endcap=flat') AS buffer" %|%
"INTO  potential_noise" %|%
"FROM " %|%
"  salzburg_roads AS r;"
slzg_distance <- st_read(con, query = query_03_02)
query_03_02 <-
"SELECT" %|%
"  ST_Buffer(ST_Union(r.geometry), 20, 'endcap=flat') AS buffer" %|%
"INTO  potential_noise" %|%
"FROM " %|%
"  salzburg_roads AS r;"
slzg_distance <- st_read(con, query = query_03_02)
slzg_distance <- st_read(con, query = query_03_02)
query_03_02 <-
"SELECT" %|%
"  ST_Buffer(ST_Union(r.geometry), 20, 'endcap=flat') AS buffer" %|%
"INTO  potential_noise" %|%
"FROM " %|%
"  salzburg_roads AS r;"
slzg_distance <- st_read(con, query = query_03_02)
query_03_03 <-
"b.*" %|%
"  salzburgs_buildings AS b" %|%
"  potential_noise AS n" %|%
"WHERE " %|%
"  ST_Intersects(n.buffer, b.geometry) IS FALSE;"
slzg_distance <- st_read(con, query = query_03_03)
query_03_03 <-
"SELECT b.*" %|%
"FROM" %|%
"  salzburgs_buildings AS b" %|%
"  potential_noise AS n" %|%
"WHERE " %|%
"  ST_Intersects(n.buffer, b.geometry) IS FALSE;"
slzg_distance <- st_read(con, query = query_03_03)
query_03_03 <-
"SELECT b.*" %|%
"FROM" %|%
"  salzburgs_buildings AS b," %|%
"  potential_noise AS n" %|%
"WHERE " %|%
"  ST_Intersects(n.buffer, b.geometry) IS FALSE;"
slzg_distance <- st_read(con, query = query_03_03)
query_03_03 <-
"SELECT b.*" %|%
"FROM" %|%
"  salzburgs_buildings AS b," %|%
"  potential_noise AS n" %|%
"WHERE " %|%
"  ST_Intersects(n.buffer, b.geometry) IS FALSE;"
slzg_distance <- st_read(con, query = query_03_03)
query_03_03 <-
"SELECT b.*" %|%
"FROM" %|%
" salzburgs_buildings AS b," %|%
" potential_noise AS n" %|%
"WHERE " %|%
"  ST_Intersects(n.buffer, b.geometry) IS FALSE;"
slzg_distance <- st_read(con, query = query_03_03)
query_03_03 <-
"SELECT b.*" %|%
"FROM" %|%
" salzburg_buildings AS b," %|%
" potential_noise AS n" %|%
"WHERE " %|%
"  ST_Intersects(n.buffer, b.geometry) IS FALSE;"
slzg_distance <- st_read(con, query = query_03_03)
query_03_03 <-
"SELECT b.*" %|%
"FROM" %|%
" salzburg_buildings AS b," %|%
" potential_noise AS n" %|%
"WHERE " %|%
"  ST_Intersects(n.buffer, b.geometry) IS FALSE;"
slzg_distance <- st_read(con, query = query_03_03)
slzg_distance
knitr::opts_chunk$set(echo = TRUE)
slzg_cs
slzg_cs
slzg_cs["fclass"]
plot(slzg_cs["fclass"])
query_02 <- "SELECT b.*, ST_Distance(m.geometry, b.geometry) as distance" %|%
" FROM salzburg_buildings as b," %|%
"  (SELECT ST_Union(geometry) as geometry" %|%
"   FROM salzburg_roads" %|%
"   WHERE fclass = 'motorway' OR fclass = 'motorway_link') as m;"
slzg_distance <- st_read(con, query = query_02)
slzg_distance["distance"]
plot(slzg_distance["distance"])
plot(slzg_distance["distance"][1,])
plot(slzg_distance["distance"][1:10,])
plot(slzg_distance["distance"][1:10,], lwd = 1)
plot(slzg_distance["distance"][1:10,], lwd = 0)
plot(slzg_distance["distance"][1:10,], lwd = 0.1)
plot(slzg_distance["distance"][1:10,], lwd = 0.01)
plot(slzg_distance["distance"][1:10,], lwd = 0.00)
plot(slzg_distance["distance"][1:10,], lwd = 0.001)
plot(slzg_distance["distance"], lwd = 0.001)
query_02_01 <- "SELECT * FROM salzburg_roads" %|%
" WHERE fclass = 'motorway' OR fclass = 'motorway_link';"
RRR <- st_read(con, query = query_02_01)
RRR
plot(RRR)
plot(RRR$geometry)
dev.off()
plot(RRR$geometry)
plot(slzg_distance["distance"], lwd = 0.001)
plot(RRR$geometry, add=TRUE)
plot(RRR$geometry, col = "red")
plot(slzg_distance["distance"], lwd = 0.001)
plot(RRR$geometry, col = "red", add=TRUE)
queryx <-
"SELECT" %|%
"  r.*," %|%
"  ST_Buffer(r.geometry, 20, 'endcap=flat') AS potential_noise" %|%
"FROM" %|%
"  salzburg_roads AS r;"
queryx
slzg_distance <- st_read(con, query = queryx)
slzg_distance
slzg_distance$potential_noise
slzg_distance$potential_noise
plot(slzg_distance$potential_noise)
query_05 <-
"SELECT b.*" %|%
"FROM" %|%
" salzburg_buildings AS b," %|%
" potential_noise AS n" %|%
"WHERE " %|%
"  ST_Intersects(n.buffer, b.geometry) IS FALSE;"
query_05_sf <- st_read(con, query = query_05)
query_05_sf
query_05_sf
query_05_sf
query_05_sf["fclass"]
plot(query_05_sf["fclass"])
query_05_sf
plot(query_05_sf["type"])
RRR
RRR
plot(slzg_distance["distance"], lwd = 0.001)
