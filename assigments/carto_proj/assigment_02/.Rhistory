position = "bottomright") %>%
addEasyButton(easyButton(
icon = htmltools::span(class = "star", htmltools::HTML("&starf;")),
onClick = JS("function(btn, map){ map.setView([47.79724, 13.05073], 13);}")))
leaflet(states) %>%
setView(13.05073, 47.79724, 13) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas, group = "Carto basemap") %>%
addPolygons(
fillColor = ~pal(density),
weight = 1,
opacity = 1,
color = "black",
popup = "<img src='fig/ggp_01.png'></img>",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "white",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~density, opacity = 0.7, title = NULL,
position = "bottomright") %>%
addEasyButton(easyButton(
icon = htmltools::span(class = "star", htmltools::HTML("&starf;")),
onClick = JS("function(btn, map){ map.setView([47.79724, 13.05073], 13);}")))
leaflet(states) %>%
setView(13.05073, 47.79724, 13) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas, group = "Carto basemap") %>%
addPolygons(
fillColor = ~pal(density),
weight = 1,
opacity = 1,
color = "black",
popup = "<img src='ggp_01.png'></img>",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "white",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~density, opacity = 0.7, title = NULL,
position = "bottomright") %>%
addEasyButton(easyButton(
icon = htmltools::span(class = "star", htmltools::HTML("&starf;")),
onClick = JS("function(btn, map){ map.setView([47.79724, 13.05073], 13);}")))
bins <- c(0, 1000, 1500, 2000, 2500, 3000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g people / km<sup>2</sup>",
states$name, states$density
) %>% lapply(htmltools::HTML)
leaflet(states) %>%
setView(13.05073, 47.79724, 13) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas, group = "Carto basemap") %>%
addPolygons(
fillColor = ~pal(density),
weight = 1,
opacity = 1,
color = "black",
popup = "<img src=''></img>",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "white",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~density, opacity = 0.7, title = NULL,
position = "bottomright") %>%
addEasyButton(easyButton(
icon = htmltools::span(class = "star", htmltools::HTML("&starf;")),
onClick = JS("function(btn, map){ map.setView([47.79724, 13.05073], 13);}")))
leaflet(states) %>%
setView(13.05073, 47.79724, 13) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas, group = "Carto basemap") %>%
addPolygons(
fillColor = ~pal(density),
weight = 1,
opacity = 1,
color = "black",
popup = "<img src=data/fig/ggp_01.png></img>",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "white",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~density, opacity = 0.7, title = NULL,
position = "bottomright") %>%
addEasyButton(easyButton(
icon = htmltools::span(class = "star", htmltools::HTML("&starf;")),
onClick = JS("function(btn, map){ map.setView([47.79724, 13.05073], 13);}")))
leaflet(states) %>%
setView(13.05073, 47.79724, 13) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas, group = "Carto basemap") %>%
addPolygons(
fillColor = ~pal(density),
weight = 1,
opacity = 1,
color = "black",
popup = "<img src=./data/fig/ggp_01.png></img>",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "white",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~density, opacity = 0.7, title = NULL,
position = "bottomright") %>%
addEasyButton(easyButton(
icon = htmltools::span(class = "star", htmltools::HTML("&starf;")),
onClick = JS("function(btn, map){ map.setView([47.79724, 13.05073], 13);}")))
leaflet(states) %>%
setView(13.05073, 47.79724, 13) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas, group = "Carto basemap") %>%
addPolygons(
fillColor = ~pal(density),
weight = 1,
opacity = 1,
color = "black",
popup = "<img src=./csaybar/Documents/Github/digitalearth/assigments/carto_proj/assigment_02/data/fig/ggp_01.png></img>",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "white",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~density, opacity = 0.7, title = NULL,
position = "bottomright") %>%
addEasyButton(easyButton(
icon = htmltools::span(class = "star", htmltools::HTML("&starf;")),
onClick = JS("function(btn, map){ map.setView([47.79724, 13.05073], 13);}")))
leaflet(states) %>%
setView(13.05073, 47.79724, 13) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas, group = "Carto basemap") %>%
addPolygons(
fillColor = ~pal(density),
weight = 1,
opacity = 1,
color = "black",
popup = "<img src=./Documents/Github/digitalearth/assigments/carto_proj/assigment_02/data/fig/ggp_01.png></img>",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "white",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~density, opacity = 0.7, title = NULL,
position = "bottomright") %>%
addEasyButton(easyButton(
icon = htmltools::span(class = "star", htmltools::HTML("&starf;")),
onClick = JS("function(btn, map){ map.setView([47.79724, 13.05073], 13);}")))
leaflet(states) %>%
setView(13.05073, 47.79724, 13) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas, group = "Carto basemap") %>%
addPolygons(
fillColor = ~pal(density),
weight = 1,
opacity = 1,
color = "black",
popup = "<img src=https://storage.googleapis.com/rgee_dev/fig/ggp_01.svg></img>",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "white",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~density, opacity = 0.7, title = NULL,
position = "bottomright") %>%
addEasyButton(easyButton(
icon = htmltools::span(class = "star", htmltools::HTML("&starf;")),
onClick = JS("function(btn, map){ map.setView([47.79724, 13.05073], 13);}")))
leaflet(states) %>%
setView(13.05073, 47.79724, 13) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas, group = "Carto basemap") %>%
addPolygons(
fillColor = ~pal(density),
weight = 1,
opacity = 1,
color = "black",
popup = "<img src='https://storage.googleapis.com/rgee_dev/fig/ggp_01.svg'></img>",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "white",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~density, opacity = 0.7, title = NULL,
position = "bottomright") %>%
addEasyButton(easyButton(
icon = htmltools::span(class = "star", htmltools::HTML("&starf;")),
onClick = JS("function(btn, map){ map.setView([47.79724, 13.05073], 13);}")))
leaflet(states) %>%
setView(13.05073, 47.79724, 13) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas, group = "Carto basemap") %>%
addPolygons(
fillColor = ~pal(density),
weight = 1,
opacity = 1,
color = "black",
popup = "<img src=./data/fig/ggp_01.png width=20%></img>",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "white",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~density, opacity = 0.7, title = NULL,
position = "bottomright") %>%
addEasyButton(easyButton(
icon = htmltools::span(class = "star", htmltools::HTML("&starf;")),
onClick = JS("function(btn, map){ map.setView([47.79724, 13.05073], 13);}")))
popupOptions
leaflet(states) %>%
setView(13.05073, 47.79724, 13) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas, group = "Carto basemap") %>%
addPolygons(
fillColor = ~pal(density),
weight = 1,
opacity = 1,
color = "black",
popup = "<img src=./data/fig/ggp_01.png width=400px></img>",
popupOptions = popupOptions(autoPan=FALSE),
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "white",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~density, opacity = 0.7, title = NULL,
position = "bottomright") %>%
addEasyButton(easyButton(
icon = htmltools::span(class = "star", htmltools::HTML("&starf;")),
onClick = JS("function(btn, map){ map.setView([47.79724, 13.05073], 13);}")))
library(ggplot2)
name <- states[1,1]$name
values <- st_drop_geometry(states[1,2:(ncol(states)-3)]) %>% as.numeric()
dates <- 2000:2019
name
states$name
states
name <- states[1,1]$name
values <- st_drop_geometry(states[1,2:(ncol(states)-3)]) %>% as.numeric()
dates <- 2000:2019
dff <- data.frame(name = name, dates = dates, population = values)
pop_plot <- ggplot(dff) +
geom_line(aes(x = dates, y = population)) +
geom_point(aes(x = dates, y = population)) +
xlab("") +
ggtitle(name) +
theme_classic()
pop_plot
ggsave("data/fig/ggp_01.png", pop_plot,width = 500,height = 500)
ggsave("data/fig/ggp_01.png", pop_plot, width = 50,height = 50)
ggsave("data/fig/ggp_01.png", pop_plot, width = 5,height = 5)
ggsave("data/fig/ggp_01.png", pop_plot, width = 3,height = 3)
states
name <- states[2,1]$name
name
name <- states[1,1]$name
name
states
nrow(states)
1:nrow(states)
sprintf("data/fig/ggp_%02d.png", index)
index <- 1
sprintf("data/fig/ggp_%02d.png", index)
gfile<-sprintf("data/fig/ggp_%02d.png", index)
gfile
for (index in 1:nrow(states)) {
name <- states[x,1]$name
values <- st_drop_geometry(states[1,2:(ncol(states)-3)]) %>% as.numeric()
dates <- 2000:2019
dff <- data.frame(name = name, dates = dates, population = values)
pop_plot <- ggplot(dff) +
geom_line(aes(x = dates, y = population)) +
geom_point(aes(x = dates, y = population)) +
xlab("") +
ggtitle(name) +
theme_classic()
gfile<-sprintf("data/fig/ggp_%02d.png", index)
ggsave(gfile, pop_plot, width = 3,height = 3)
}
for (index in 1:nrow(states)) {
name <- states[index,1]$name
values <- st_drop_geometry(states[1,2:(ncol(states)-3)]) %>% as.numeric()
dates <- 2000:2019
dff <- data.frame(name = name, dates = dates, population = values)
pop_plot <- ggplot(dff) +
geom_line(aes(x = dates, y = population)) +
geom_point(aes(x = dates, y = population)) +
xlab("") +
ggtitle(name) +
theme_classic()
gfile<-sprintf("data/fig/ggp_%02d.png", index)
ggsave(gfile, pop_plot, width = 3,height = 3)
}
for (index in 1:nrow(states)) {
name <- states[index,1]$name
values <- st_drop_geometry(states[index,2:(ncol(states)-3)]) %>% as.numeric()
dates <- 2000:2019
dff <- data.frame(name = name, dates = dates, population = values)
pop_plot <- ggplot(dff) +
geom_line(aes(x = dates, y = population)) +
geom_point(aes(x = dates, y = population)) +
xlab("") +
ggtitle(name) +
theme_classic()
´
gfile<-sprintf("data/fig/ggp_%02d.png", index)
ggsave(gfile, pop_plot, width = 3,height = 3)
}
gfile<-sprintf("data/fig/ggp_%02d.png", index)
for (index in 1:nrow(states)) {
name <- states[index,1]$name
values <- st_drop_geometry(states[index,2:(ncol(states)-3)]) %>% as.numeric()
dates <- 2000:2019
dff <- data.frame(name = name, dates = dates, population = values)
pop_plot <- ggplot(dff) +
geom_line(aes(x = dates, y = population)) +
geom_point(aes(x = dates, y = population)) +
xlab("") +
ggtitle(name) +
theme_classic()
gfile<-sprintf("data/fig/ggp_%02d.png", index)
ggsave(gfile, pop_plot, width = 3,height = 3)
}
leaflet(states) %>%
setView(13.05073, 47.79724, 13) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas, group = "Carto basemap") %>%
addPolygons(
fillColor = ~pal(density),
weight = 1,
opacity = 1,
color = "black",
popup = sprintf("<img src=./data/fig/ggp_%02d.png width=400px></img>",1:nrow(states)),
popupOptions = popupOptions(autoPan=FALSE),
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "white",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~density, opacity = 0.7, title = NULL,
position = "bottomright") %>%
addEasyButton(easyButton(
icon = htmltools::span(class = "star", htmltools::HTML("&starf;")),
onClick = JS("function(btn, map){ map.setView([47.79724, 13.05073], 13);}")))
name <- states[index,1]$name
values <- st_drop_geometry(states[index,2:(ncol(states)-3)]) %>% as.numeric()
dates <- 2000:2019
dff <- data.frame(name = name, dates = dates, population = values)
pop_plot <- ggplot(dff) +
geom_line(aes(x = dates, y = population)) +
geom_point(aes(x = dates, y = population)) +
xlab("") +
ggtitle(name) +
theme_classic()
pop_plot
pop_plot <- ggplot(dff) +
geom_line(aes(x = dates, y = population)) +
geom_point(aes(x = dates, y = population)) +
xlab("") +
geom_smooth(method = "lm") +
ggtitle(name) +
theme_classic()
pop_plot
pop_plot <- ggplot(dff) +
geom_line(aes(x = dates, y = population)) +
geom_smooth(method = "lm") +
geom_point(aes(x = dates, y = population)) +
xlab("") +
ggtitle(name) +
theme_classic()
pop_plot
pop_plot <- ggplot(dff) +
geom_line(aes(x = dates, y = population)) +
geom_point(aes(x = dates, y = population)) +
geom_smooth(method = "lm", se = FALSE) +
xlab("") +
ggtitle(name) +
theme_classic()
pop_plot
pop_plot <- ggplot(dff) +
geom_line(aes(x = dates, y = population)) +
geom_point(aes(x = dates, y = population)) +
geom_smooth(method = "lm", se = FALSE) +
xlab("") +
ggtitle(name) +
theme_classic()
pop_plot
pop_plot <- ggplot(dff) +
geom_line(aes(x = dates, y = population)) +
geom_point(aes(x = dates, y = population)) +
geom_smooth(aes(x = dates, y = population), method = "lm", se = FALSE) +
xlab("") +
ggtitle(name) +
theme_classic()
pop_plot
population
for (index in 1:nrow(states)) {
name <- states[index,1]$name
values <- st_drop_geometry(states[index,2:(ncol(states)-3)]) %>% as.numeric()
dates <- 2000:2019
dff <- data.frame(name = name, dates = dates, population = values)
pop_plot <- ggplot(dff) +
geom_line(aes(x = dates, y = population)) +
geom_point(aes(x = dates, y = population)) +
geom_smooth(aes(x = dates, y = population), method = "lm", se = FALSE) +
xlab("") +
ggtitle(name) +
theme_classic()
pop_plot
gfile<-sprintf("data/fig/ggp_%02d.png", index)
ggsave(gfile, pop_plot, width = 3,height = 3)
}
index
index <- 14
name <- states[index,1]$name
values <- st_drop_geometry(states[index,2:(ncol(states)-3)]) %>% as.numeric()
dates <- 2000:2019
dff <- data.frame(name = name, dates = dates, population = values)
pop_plot <- ggplot(dff) +
geom_line(aes(x = dates, y = population)) +
geom_point(aes(x = dates, y = population)) +
geom_smooth(aes(x = dates, y = population), method = "lm", se = FALSE) +
xlab("") +
ggtitle(name) +
theme_classic()
pop_plot
dff
name <- states[index,1]$name
name
values <- st_drop_geometry(states[index,2:(ncol(states)-3)]) %>% as.numeric()
values
states
states <- read_sf("data/salzburg_population.geojson")
name <- states[index,1]$name
values <- st_drop_geometry(states[index,2:(ncol(states)-3)]) %>% as.numeric()
dates <- 2000:2019
dff <- data.frame(name = name, dates = dates, population = values)
dff
name <- states[index,1]$name
values <- st_drop_geometry(states[index,2:(ncol(states)-3)]) %>% as.numeric()
values <- st_drop_geometry(states
states <- read_sf("data/salzburg_population.geojson")
name <- states[index,1]$name
name
values <- st_drop_geometry(states[index,2:(ncol(states)-3)]) %>% as.numeric()
values
states
index
states[index,2:(ncol(states)-3)]
states[14,]
