kbl(table_q1, escape = F) %>%
kable_paper("hover", full_width = F) %>%
column_spec(5, width = "3cm") %>%
footnote(title_format = "dasdasdasdas")
kbl(table_q1, escape = F) %>%
kable_paper("hover", full_width = F) %>%
column_spec(5, width = "3cm") %>%
footnote("ddd")
kbl(table_q1, escape = F) %>%
kable_paper("hover", full_width = F) %>%
column_spec(5, width = "3cm") %>%
footnote("ddd", footnote_as_chunk = T)
kbl(table_q1, escape = F) %>%
kable_paper("hover", full_width = F) %>%
column_spec(5, width = "3cm") %>%
footnote("- means not fully available for all the products.", footnote_as_chunk = T)
kbl(table_q1, escape = F) %>%
kable_paper("hover", full_width = F) %>%
column_spec(5, width = "3cm") %>%
footnote("**-** means not fully available for all the products.", footnote_as_chunk = T)
kbl(table_q1, escape = F) %>%
kable_paper("hover", full_width = F) %>%
column_spec(5, width = "3cm") %>%
footnote("- means not fully available for all the products.", footnote_as_chunk = T)
features <- c(
"Clipping",
"Cloud Masks",
"Rad. Correction",
"Atm. Correction",
"Pixel Alignment",
"Sensor Alignment",
"Products"
)
ARD <- c("Planet", "USGS")
table_q1 <- matrix(1, length(ARD), length(features))  %>% as.data.frame()
colnames(table_q1) <- features
rownames(table_q1) <- ARD
table_q1$"Clipping" <- c(1, 1)
table_q1$"Cloud Masks" <- c(0, 1)
table_q1$"Rad. Correction" <- c(1, 1)
table_q1$"Atm. Correction" <- c(0, 1)
table_q1$"Pixel Alignment" <- c(1, 1)
table_q1$"Sensor Alignment" <- c(-1, -1)
table_q1$"Products" <- c("CARD4L-OSR, CARD4L-ST, CARD4L-NRB", "Planetscope, RapideEye and Skysat", "Landsat")
table_q1[table_q1 == -1] = cell_spec("x", color = "red", bold = T, align = "center")
table_q1$"Products" <- c("Planetscope, RapideEye and Skysat", "Landsat")
table_q1[table_q1 == -1] = cell_spec("x", color = "red", bold = T, align = "center")
table_q1[table_q1 == 0] = cell_spec("-", color = "yellow", bold = T, align = "center")
table_q1[table_q1 == 1] = cell_spec("✓", color = "green", bold = T, align = "center")
kbl(table_q1, escape = F) %>%
kable_paper("hover", full_width = F) %>%
column_spec(5, width = "3cm") %>%
footnote("- means not fully available for all the products.", footnote_as_chunk = T)
features <- c(
"Clipping",
"Cloud Masks",
"Rad. Correction",
"Atm. Correction",
"Pixel Alignment",
"Sensor Alignment",
"Products"
)
ARD <- c("Planet", "USGS")
table_q1 <- matrix(1, length(ARD), length(features))  %>% as.data.frame()
colnames(table_q1) <- features
rownames(table_q1) <- ARD
table_q1$"Clipping" <- c(1, 1)
table_q1$"Cloud Masks" <- c(0, 1)
table_q1$"Rad. Correction" <- c(1, 1)
table_q1$"Atm. Correction" <- c(0, 1)
table_q1$"Pixel Alignment" <- c(1, 1)
table_q1$"Sensor Alignment" <- c(-1, -1)
table_q1$"Products" <- c("Planetscope, RapideEye and Skysat", "Landsat")
table_q1[table_q1 == -1] = cell_spec("x", color = "red", bold = T, align = "center")
table_q1[table_q1 == 0] = cell_spec("-", color = "#d4bb00", bold = T, align = "center")
table_q1[table_q1 == 1] = cell_spec("✓", color = "green", bold = T, align = "center")
kbl(table_q1, escape = F) %>%
kable_paper("hover", full_width = F) %>%
column_spec(5, width = "3cm") %>%
footnote("- means not fully available for all the products.", footnote_as_chunk = T)
table_q1[table_q1 == -1] = cell_spec("x", color = "red", bold = T, align = "center")
table_q1[table_q1 == 0] = cell_spec("nc", color = "#d4bb00", bold = T, align = "center")
table_q1[table_q1 == 1] = cell_spec("✓", color = "green", bold = T, align = "center")
kbl(table_q1, escape = F) %>%
kable_paper("hover", full_width = F) %>%
column_spec(5, width = "3cm") %>%
footnote("- means not fully available for all the products.", footnote_as_chunk = T)
kbl(table_q1, escape = F) %>%
kable_paper("hover", full_width = F) %>%
column_spec(5, width = "3cm") %>%
footnote("nc means not fully available for all the products.", footnote_as_chunk = T)
features <- c(
"Clipping",
"Cloud Masks",
"Rad. Correction",
"Atm. Correction",
"Pixel Alignment",
"Sensor Alignment",
"Products"
)
ARD <- c("Planet", "USGS")
table_q1 <- matrix(1, length(ARD), length(features))  %>% as.data.frame()
colnames(table_q1) <- features
rownames(table_q1) <- ARD
table_q1$"Clipping" <- c(1, 1)
table_q1$"Cloud Masks" <- c(0, 1)
table_q1$"Rad. Correction" <- c(1, 1)
table_q1$"Atm. Correction" <- c(0, 1)
table_q1$"Pixel Alignment" <- c(1, 1)
table_q1$"Sensor Alignment" <- c(-1, -1)
table_q1$"Products" <- c("Planetscope, RapideEye and Skysat", "Landsat")
table_q1[table_q1 == -1] = cell_spec("x", color = "red", bold = T, align = "center")
table_q1[table_q1 == 0] = cell_spec("nc", color = "#d4bb00", bold = T, align = "center")
table_q1[table_q1 == 1] = cell_spec("✓", color = "green", bold = T, align = "center")
kbl(table_q1, escape = F) %>%
kable_paper("hover", full_width = F) %>%
column_spec(5, width = "3cm") %>%
footnote("nc means not fully available for all the products.", footnote_as_chunk = T)
library(rgee)
ee_Initialize()
not_wanted_filter <- ee$Filter$calendarRange(4, 7, "month")
not_wanted_filter
l7col <- ee$ImageCollection("LANDSAT/LE07/C01/T1_SR") %>%
ee$ImageCollection$filter(not_wanted_filter$Not()) %>%
ee$ImageCollection$filter(ee$Filter$lt("CLOUD_COVER", 10))
l7col$size()$getInfo()
l7col <- ee$ImageCollection("LANDSAT/LE07/C01/T1_SR") %>% #u can use pipes if u want!
ee$ImageCollection$filter(not_wanted_filter$Not()) %>%
ee$ImageCollection$filter(ee$Filter$lt("CLOUD_COVER", 10))
library(plotly)
library(rgee)
ee_Initialize()
# Define a FeatureCollection: regions of Salzburg.
huayllay <- c(-11.007252, -76.366178)
tarma  <- c(-11.422149, -75.684271)
lamerced <- c(-11.063864, -75.332555)
# Define a FeatureCollection: regions of Salzburg.
huayllay <- c(-11.007252, -76.366178) %>% ee$Geometry$Point()
tarma  <- c(-11.422149, -75.684271) %>% ee$Geometry$Point()
lamerced <- c(-11.063864, -75.332555) %>% ee$Geometry$Point()
lamerced
ee$FeatureCollection(
ee$Feature(huayllay, list(name=huayllay)),
ee$Feature(tarma, list(name=tarma))
ee$Feature(lamerced, list(name=lamerced))
)
ee$FeatureCollection(
ee$Feature(huayllay, list(name=huayllay)),
ee$Feature(tarma, list(name=tarma)),
ee$Feature(lamerced, list(name=lamerced))
)
ee$FeatureCollection(
list(
ee$Feature(huayllay, list(name=huayllay)),
ee$Feature(tarma, list(name=tarma)),
ee$Feature(lamerced, list(name=lamerced))
)
)
fc_points <- ee$FeatureCollection(
list(
ee$Feature(huayllay, list(name=huayllay)),
ee$Feature(tarma, list(name=tarma)),
ee$Feature(lamerced, list(name=lamerced))
)
)
# Load Landsat 8 collection
temps2013 <- ee$ImageCollection('LANDSAT/LC08/C01/T1_32DAY_TOA') %>%
ee$ImageCollection$filterDate('2013-12-25', '2017-12-25') %>%
ee$ImageCollection$select('B11')
temps2013
ee_extract(temps2013, fc_points)
fc_points
# Load Landsat 8 collection
temps2013 <- ee$ImageCollection('LANDSAT/LC08/C01/T1_32DAY_TOA') %>%
ee$ImageCollection$filterDate('2013-12-25', '2017-12-25') %>%
ee$ImageCollection$select('B11')
# Load Landsat 8 collection
temps2013 <- ee$ImageCollection('LANDSAT/LC08/C01/T1_32DAY_TOA') %>%
ee$ImageCollection$filterDate('2013-12-25', '2017-12-25') %>%
ee$ImageCollection$filterBounds(fc_points) %>%
ee$ImageCollection$select('B11')
temps2013$size()$getInfo()
temps2013
ee_extract(temps2013, fc_points)
fc_points
temps2013
fc_points
ee_print(temps2013)
temps2013
fc_points
temps2013
ee_extract(temps2013, fc_points$first())
fc_points$first()
ee_extract(temps2013, ee$Geometry$Point(fc_points$first()))
ee_extract(temps2013, ee$Feature(fc_points$first()))
temps2013
ee_extract(temps2013$toBands(), ee$Feature(fc_points$first()))
ee_extract(temps2013$toBands(), ee$Feature(fc_points$first()),scale = 100)
# Load Landsat 8 collection
temps2013 <- ee$ImageCollection('LANDSAT/LC08/C01/T1_32DAY_TOA') %>%
ee$ImageCollection$filterDate('2013-12-25', '2017-12-25') %>%
ee$ImageCollection$filterBounds(fc_points) %>%
ee$ImageCollection$select('B11')
ee_extract(temps2013$toBands(), fc_points,scale = 100)
y =  fc_points
x = temps2013$toBands()
scale = 100
if (!quiet & is.null(scale)) {
scale <- 1000
message(sprintf("The image scale is set to %s.", scale))
}
quiet = FALSE
ee_extract(x = temps2013$toBands(), y =  fc_points, scale = 100,sf = TRUE)
sf = TRUE
if (!quiet & is.null(scale)) {
scale <- 1000
message(sprintf("The image scale is set to %s.", scale))
}
if (!requireNamespace("geojsonio", quietly = TRUE)) {
stop("package geojsonio required, please install it first")
}
if (!requireNamespace("sf", quietly = TRUE)) {
stop("package sf required, please install it first")
}
if (!any(class(x) %in% ee_get_spatial_objects("i+ic"))) {
stop("x is neither an ee$Image nor ee$ImageCollection")
}
if (any(class(x) %in% "ee.imagecollection.ImageCollection")) {
if (!quiet) {
message("x is an ImageCollection, running 'x$toBands()' to ",
"convert it into an Image")
}
x <- ee$ImageCollection$toBands(x)
}
oauth_func_path <- system.file("python/ee_extract.py", package = "rgee")
oauth_func_path
extract_py <- ee_source_python(oauth_func_path)
ee_source_python<- rgee:::ee_source_python
ee_source_python
extract_py <- ee_source_python(oauth_func_path)
extract_py
sp_objects <- ee_get_spatial_objects("Table")
ee_get_spatial_objects <- rgee:::ee_get_spatial_objects
sp_objects <- ee_get_spatial_objects("Table")
sp_objects
if (!any(class(y) %in% c("sf", "sfc", sp_objects))) {
stop("y is not a sf, sfc, ee$Geometry, ee$Feature or ee$FeatureCollection object.")
}
if (any("sf" %in% class(y))) {
sf_y <- y
if (!quiet) {
message("y is an sf object, running 'sf_as_ee(y$geometry)' to ",
"convert it into an ee$FeatureCollection object.")
}
ee_y <- sf_as_ee(y[["geometry"]], quiet = TRUE)
}
y
class(y)
else if (any("sfc" %in% class(y))) {
sf_y <- sf::st_sf(id = seq_along(y), geometry = y)
if (!quiet) {
message("y is an sfc object, running 'sf_as_ee(y)' to ",
"convert it into an ee$FeatureCollection object.")
}
ee_y <- sf_as_ee(y, quiet = TRUE)
}
any("sfc" %in% class(y))
else if (any(ee_get_spatial_objects("Table") %in% class(y))) {
ee_y <- ee$FeatureCollection(y)
if (isTRUE(sf)) {
sf_y <- ee_as_sf(y, quiet = TRUE)
}
}
if (any("sf" %in% class(y))) {
sf_y <- y
if (!quiet) {
message("y is an sf object, running 'sf_as_ee(y$geometry)' to ",
"convert it into an ee$FeatureCollection object.")
}
ee_y <- sf_as_ee(y[["geometry"]], quiet = TRUE)
}
else if (any("sfc" %in% class(y))) {
sf_y <- sf::st_sf(id = seq_along(y), geometry = y)
if (!quiet) {
message("y is an sfc object, running 'sf_as_ee(y)' to ",
"convert it into an ee$FeatureCollection object.")
}
ee_y <- sf_as_ee(y, quiet = TRUE)
}
else if (any(ee_get_spatial_objects("Table") %in% class(y))) {
ee_y <- ee$FeatureCollection(y)
if (isTRUE(sf)) {
sf_y <- ee_as_sf(y, quiet = TRUE)
}
}
ee_add_rows <- function(f) {
f_prop <- ee$Feature$get(f, "system:index")
ee$Feature(ee$Feature$set(f, "ee_ID", f_prop))
}
ee_y <- ee$FeatureCollection(ee_y) %>% ee$FeatureCollection$map(ee_add_rows)
ee_y
fun_name <- gsub("Reducer.", "", (ee$Reducer$getInfo(fun))[["type"]])
fun
fun = ee$Reducer$mean()
ee_add_rows <- function(f) {
f_prop <- ee$Feature$get(f, "system:index")
ee$Feature(ee$Feature$set(f, "ee_ID", f_prop))
}
ee_y <- ee$FeatureCollection(ee_y) %>% ee$FeatureCollection$map(ee_add_rows)
fun_name <- gsub("Reducer.", "", (ee$Reducer$getInfo(fun))[["type"]])
x_ic <- bands_to_image_collection(x)
create_tripplets <- function(img) {
img_reduce_regions <- ee$Image$reduceRegions(image = img,
collection = ee_y, reducer = fun, scale = scale,
...)
ee$FeatureCollection$map(img_reduce_regions, function(f) {
ee$Feature$set(f, "imageId", ee$Image$get(img, "system:index"))
})
}
triplets <- x_ic %>% ee$ImageCollection$map(create_tripplets) %>%
ee$ImageCollection$flatten()
create_tripplets <- function(img) {
img_reduce_regions <- ee$Image$reduceRegions(image = img,
collection = ee_y, reducer = fun, scale = scale,
...)
ee$FeatureCollection$map(img_reduce_regions, function(f) {
ee$Feature$set(f, "imageId", ee$Image$get(img, "system:index"))
})
}
triplets <- x_ic %>% ee$ImageCollection$map(create_tripplets) %>%
ee$ImageCollection$flatten()
ee_y <- ee$FeatureCollection(ee_y) %>% ee$FeatureCollection$map(ee_add_rows)
fun_name <- gsub("Reducer.", "", (ee$Reducer$getInfo(fun))[["type"]])
x_ic <- bands_to_image_collection(x)
bands_to_image_collection <- rgee:::bands_to_image_collection
bands_to_image_collection
# Define a FeatureCollection: regions of Salzburg.
huayllay <- c(-76.366178, -11.007252) %>% ee$Geometry$Point()
tarma  <- c(-75.684271, -11.422149) %>% ee$Geometry$Point()
lamerced <- c(-75.332555, -11.063864) %>% ee$Geometry$Point()
fc_points <- ee$FeatureCollection(
list(
ee$Feature(huayllay, list(name=huayllay)),
ee$Feature(tarma, list(name=tarma)),
ee$Feature(lamerced, list(name=lamerced))
)
)
# Load Landsat 8 collection
temps2013 <- ee$ImageCollection('LANDSAT/LC08/C01/T1_32DAY_TOA') %>%
ee$ImageCollection$filterDate('2013-12-25', '2017-12-25') %>%
ee$ImageCollection$filterBounds(fc_points) %>%
ee$ImageCollection$select('B11')
ee_extract(x = temps2013$toBands(), y =  fc_points, scale = 100, sf = TRUE)
time_serie <- ee_extract(x = temps2013$toBands(), y =  fc_points, scale = 100, sf = TRUE)
time_serie
library(sf)
st_drop_geometry(time_serie)
time_serie_nosf <- st_drop_geometry(time_serie)
time_serie_nosf[1,]
time_serie_nosf <- st_drop_geometry(time_serie) %>% t
time_serie_nosf
st_drop_geometry(time_serie)
time_serie_nosf <- st_drop_geometry(time_serie) %>% t
time_serie_nosf <- st_drop_geometry(time_serie) %>% t %>% data.frame()
time_serie_nosf
rownames(time_serie_nosf)
x
time_serie_nosf
rownames(time_serie_nosf)
gsub("X|_B11", "", rownames(time_serie_nosf))
as.Date(gsub("X|_B11", "", rownames(time_serie_nosf)), "%Y%m%d")
dates <- as.Date(gsub("X|_B11", "", rownames(time_serie_nosf)), "%Y%m%d")
dates
# Creating a tidy df
time_serie_nosf <- st_drop_geometry(time_serie) %>% t %>% data.frame()
dates <- as.Date(gsub("X|_B11", "", rownames(time_serie_nosf)), "%Y%m%d")
dates
colnames(time_serie_nosf)
colnames(time_serie_nosf) <- c("huayllay", "tarma", "lamerced")
time_serie_nosf
rownames(time_serie_nosf) <- NULL
time_serie_nosf$Date <- dates
time_serie_nosf
library(dplyr)
time_serie_nosf
time_serie <- ee_extract(x = temps2013$toBands(), y =  fc_points, scale = 100)
time_serie
# Creating a tidy df
time_serie_nosf <- time_serie %>% t %>% data.frame()
dates <- as.Date(gsub("X|_B11", "", rownames(time_serie_nosf)), "%Y%m%d")
colnames(time_serie_nosf) <- c("huayllay", "tarma", "lamerced")
rownames(time_serie_nosf) <- NULL
time_serie_nosf$Date <- dates
time_serie_nosf
library(tidyr)
time_serie_nosf
time_serie_nosf %>%
pivot_longer(!date, names_to = "income", values_to = "count")
time_serie_nosf %>%
pivot_longer(!Date, names_to = "income", values_to = "count")
time_serie_nosf %>%
pivot_longer(!Date, names_to = "City", values_to = "Temperature Value (K)")
cities_tidy <- time_serie_nosf %>%
pivot_longer(!Date,
names_to = "City",
values_to = "Temperature Value (K)")
cities_tidy <- time_serie_nosf %>%
pivot_longer(!Date,
names_to = "City",
values_to = "Temperature Value (K)")
cities_tidy
ggplot(cities_tidy) +
geom_line(aes(x="Date", y="Value", group="City", color="City"))
time_serie_nosf
ggplot(cities_tidy) +
geom_line(aes(x="Date", y="Value", group="City", color="City"))
ggplot(cities_tidy) +
geom_line(aes(x=Date, y=Value, group=City, color=City))
ggplot(cities_tidy) +
geom_line(aes(Date, Value))
cities_tidy <- time_serie_nosf %>%
pivot_longer(!Date,
names = "City",
values = "Temperature Value (K)")
cities_tidy <- time_serie_nosf %>%
pivot_longer(!Date,
names_to = "City",
values_to = "Temperature Value (K)")
cities_tidy <- time_serie_nosf %>%
pivot_longer(!Date,
names_to = "city",
values_to = "temp")
cities_tidy
ggplot(cities_tidy) +
geom_line(aes(Date, temp))
ggplot(cities_tidy) +
geom_line(aes(Date, temp, group=city))
ggplot(cities_tidy) +
geom_line(aes(Date, temp, group=city, color=city))
ggplot(cities_tidy) +
geom_line(aes(Date, temp, group=city, color=city))
g1 <- ggplot(cities_tidy) +
geom_line(aes(Date, temp, group=city, color=city))
gg1 <- ggplot(cities_tidy) +
geom_line(aes(Date, temp, group=city, color=city))
ggplotly(gg1)
gg1 <- ggplot(cities_tidy) +
geom_line(aes(Date, temp, group=city, color=city)) +
theme(legend.position="none")
ggplotly(gg1)
gg1 <- ggplot(cities_tidy) +
geom_line(aes(Date, temp, group=city, color=city)) +
ylab("Temperature (°K)") + xlab("")
gg1
gg1 <- ggplot(cities_tidy) +
geom_line(aes(Date, temp, group=city, color=city)) +
ylab("Temperature (°K)") + xlab("") +
theme_bw()
gg1
gg1 <- ggplot(cities_tidy) +
geom_line(aes(Date, temp, group=city, color=city)) +
ylab("Temperature (°K)") + xlab("") +
theme_bw() + theme(legend.position="none")
ggplotly(gg1)
fc_points
sf_as_ee(fc_points)
ee_as_sf(fc_points)
fc_points
huayllay
fc_points$getInfo()
# 3. Create points in R (cities) and convert it to a FeatureCollection
huayllay <- c(-76.366178, -11.007252) %>% ee$Geometry$Point()
tarma  <- c(-75.684271, -11.422149) %>% ee$Geometry$Point()
lamerced <- c(-75.332555, -11.063864) %>% ee$Geometry$Point()
fc_points <- ee$FeatureCollection(
list(
ee$Feature(huayllay, list(name="huayllay")),
ee$Feature(tarma, list(name="tarma")),
ee$Feature(lamerced, list(name="lamerced"))
)
)
# 4. Load Landsat 8 collection
temps2013 <- ee$ImageCollection('LANDSAT/LC08/C01/T1_32DAY_TOA') %>%
ee$ImageCollection$filterDate('2013-12-25', '2017-12-25') %>%
ee$ImageCollection$filterBounds(fc_points) %>%
ee$ImageCollection$select('B11')
# 5. Extract the values
time_serie <- ee_extract(x = temps2013$toBands(), y =  fc_points, scale = 100)
# 6. Convert a data.frame into tidy data.frame
time_serie_nosf <- time_serie %>% t %>% data.frame()
dates <- as.Date(gsub("X|_B11", "", rownames(time_serie_nosf)), "%Y%m%d")
colnames(time_serie_nosf) <- c("huayllay", "tarma", "lamerced")
rownames(time_serie_nosf) <- NULL
time_serie_nosf$Date <- dates
cities_tidy <- time_serie_nosf %>%
pivot_longer(!Date,
names_to = "city",
values_to = "temp")
# 7. Create a beautiful plot with ggplot2
gg1 <- ggplot(cities_tidy) +
geom_line(aes(Date, temp, group=city, color=city)) +
ylab("Temperature (°K)") + xlab("") +
theme_bw() + theme(legend.position="none")
# 8. Display final results interactively
ggplotly(gg1)
ee_as_sf(fc_points)
ee_as_sf(fc_points)["name"]
mapview::mapview(ee_as_sf(fc_points)["name"])
knitr::opts_chunk$set(echo = TRUE)
m1 <- mapview::mapview(ee_as_sf(fc_points)["name"])
m1
ee_as_sf(fc_points)["name"]
