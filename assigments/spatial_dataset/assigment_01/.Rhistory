dbname = "spdb_course",
host = "localhost",
user = "csaybar",
password = "csaybar",
port = 5432
)
# create a connection to the postgres database
con <- RPostgreSQL::dbConnect(
drv = drv,
dbname = "spdb_course",
host = "localhost",
user = "csaybar",
password = "lesly",
port = 5432
)
con
# create a connection to the postgres database
con <- RPostgreSQL::dbConnect(
drv = drv,
dbname = "spdb_course",
host = "localhost",
user = "csaybar",
password = "lesly",
port = 5432
)
library("RPostgreSQL")
# load the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# create a connection to the postgres database
con <- RPostgreSQL::dbConnect(
drv = drv,
dbname = "spdb_course",
host = "localhost",
user = "csaybar",
password = "lesly",
port = 5432
)
# create a connection to the postgres database
con <- RPostgreSQL::dbConnect(
drv = drv,
dbname = "spdb_course",
host = "localhost",
user = "csaybar",
password = "csaybar",
port = 5432
)
# create a connection to the postgres database
con <- RPostgreSQL::dbConnect(
drv = drv,
dbname = "spdb_course",
host = "localhost",
user = "csaybar",
password = "lesly",
port = 5432
)
library("RPostgreSQL")
# load the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# create a connection to the postgres database
con <- RPostgreSQL::dbConnect(
drv = drv,
dbname = "spdb_course",
host = "localhost",
user = "csaybar",
password = "lesly",
port = 5432
)
library("RPostgreSQL")
# load the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# create a connection to the postgres database
con <- RPostgreSQL::dbConnect(
drv = drv,
dbname = "spdb_course",
host = "localhost",
user = "csaybar",
password = "lesly",
port = 5432
)
library("RPostgreSQL")
# load the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# create a connection to the postgres database
con <- RPostgreSQL::dbConnect(
drv = drv,
dbname = "spdb_course",
host = "localhost",
user = "csaybar",
password = "lesly",
port = 5432
)
# create a connection to the postgres database
con <- RPostgreSQL::dbConnect(
drv = drv,
dbname = "spdb_course",
host = "localhost",
user = "csaybar",
password = "csaybar",
port = 5432
)
library("RPostgreSQL")
# load the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# create a connection to the postgres database
con <- RPostgreSQL::dbConnect(
drv = drv,
dbname = "spdb_course",
host = "localhost",
user = "csaybar",
password = "lesly",
port = 5432
)
library("RPostgreSQL")
# load the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# create a connection to the postgres database
con <- RPostgreSQL::dbConnect(
drv = drv,
dbname = "spdb_course",
host = "localhost",
user = "csaybar",
password = "lesly",
port = 5432
)
library("RPostgreSQL")
# load the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# create a connection to the postgres database
con <- RPostgreSQL::dbConnect(
drv = drv,
dbname = "spdb_course",
host = "localhost",
user = "csaybar",
password = "lesly",
port = 5432
)
con
# create a connection to the postgres database
con <- RPostgreSQL::dbConnect(
drv = drv,
dbname = "spdb_course",
host = "localhost",
user = "csaybar",
password = "lesly",
port = 5432
)
library("RPostgreSQL")
# load the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# create a connection to the postgres database
con <- RPostgreSQL::dbConnect(
drv = drv,
dbname = "spdb_course",
host = "localhost",
user = "csaybar",
password = "lesly",
port = 5432
)
setwd("/home/csaybar/Documents/Github/digitalearth/assigments/spatial_dataset/assigment_01/")
library("RPostgreSQL")
# 1. load the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# 2. create a connection to the postgres database
con <- RPostgreSQL::dbConnect(
drv = drv,
dbname = "spdb_course",
host = "localhost",
user = "csaybar",
password = "lesly",
port = 5432
)
# 3. Create the table
read.table("E03_data.sql")
"E03_data.sql"
# 3. Create the table
read.ftable("E03_data.sql")
getSQL <- function(filepath){
con = file(filepath, "r")
sql.string <- ""
while (TRUE){
line <- readLines(con, n = 1)
if ( length(line) == 0 ){
break
}
line <- gsub("\\t", " ", line)
if(grepl("--",line) == TRUE){
line <- paste(sub("--","/*",line),"*/")
}
sql.string <- paste(sql.string, line)
}
close(con)
return(sql.string)
}
# 3. Create the table
getSQL("E03_data.sql")
# 3. Create the table
dbSendQuery(con, getSQL("E03_data.sql"))
dbGetQuery(con, "SELECT * FROM capitals_world;")
source("../postgis/utils.R")
library("RPostgreSQL")
source("../postgis/utils.R") # Utils to use POSTGIS with R!
# 1. load the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# 2. create a connection to the postgres database
con <- RPostgreSQL::dbConnect(
drv = drv,
dbname = "spdb_course",
host = "localhost",
user = "csaybar",
password = "lesly",
port = 5432
)
# 4. Send a query and retrieve results
dbGetQuery(con, "SELECT * FROM capitals_world;")
1
library("RPostgreSQL")
source("../postgis/utils.R") # Utils to use POSTGIS with R!
# 1. load the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# 2. create a connection to the postgres database
con <- RPostgreSQL::dbConnect(
drv = drv,
dbname = "spdb_course",
host = "localhost",
user = "csaybar",
password = "lesly",
port = 5432
)
# 3. Create the table
# HINT: getSQL is a R function that permits us properly transform a sql file
# into a character
dbSendQuery(con, getSQL("E03_data.sql")) # Execute a query on the database
# 4. Send a query and retrieve results
dbGetQuery(con, "SELECT * FROM capitals_world;")
# 5. Send a query and retrieve results - II
dbGetQuery(con, "SELECT * FROM capitals_world ORDER BY population DESC;")
# 5. Send a query and retrieve results - II
dbGetQuery(con, "SELECT * FROM capitals_world ORDER BY population DESC LIMIT 20;")
%|% <- cat
'%|%' <- cat
"dsd" %|% "fsf"
"dsd" %|% "fsf"
"CREATE VIEW capitals_tops_20 AS " %|%
"SELECT * FROM capitals_world ORDER BY population DESC LIMIT 20"
"CREATE VIEW capitals_tops_20 AS " %|%
"SELECT * FROM capitals_world ORDER BY population DESC LIMIT 20;"
# 7. Create a View
statement <- "CREATE VIEW capitals_tops_20 AS " %|%
"SELECT * FROM capitals_world ORDER BY population DESC LIMIT 20;"
statement
statement
dbSendQuery
dbSendQuery(con, statement) # Execute a query on the database
# 7. Create a View
# %|% is a operator to concat characters
statement <- "CREATE VIEW capitals_tops_20 AS " %|%
"SELECT * FROM capitals_world ORDER BY population DESC LIMIT 20;"
# 7. Create a View
# %|% is a operator to concat characters
statement <- "CREATE VIEW capitals_tops_20 AS " %|%
"SELECT * FROM capitals_world ORDER BY population DESC LIMIT 20;"
dbSendQuery(con, statement) # Execute a query on the database
getSQL("E03_data.sql")
# 3. Create the table
# HINT: getSQL is a R function that permits us properly transform a sql file
# into a character
dbSendQuery(con, getSQL("E03_data.sql")) # Execute a query on the database
dbSendQuery(con, statement) # Execute a query on the database
dbExistsTable
dbExistsTable(con, statement) # Execute a query on the database
dbSendUpdate(con, statement) # Execute a query on the database
dbSendStatement(con, statement) # Execute a query on the database
dbSendQuery(con, statement) # Execute a query on the database
# 7. Create a View
# %|% is a operator to concat characters
statement <- "CREATE VIEW capitals_tops_20 AS " %|%
"SELECT * FROM capitals_world ORDER BY population DESC LIMIT 20;"
# 7. Create a View
# %|% is a operator to concat characters
statement <- "CREATE VIEW capitals_tops_20 AS" %|%
"SELECT * FROM capitals_world ORDER BY population DESC LIMIT 20;"
dbSendQuery(con, statement) # Execute a query on the database
statement
# 7. Create a View
# %|% is a operator to concat characters
statement <- "CREATE VIEW capitals_tops_20 AS" %|%
"SELECT * FROM capitals_world ORDER BY population DESC LIMIT 20;"
statement
'%|%' <- function(...) {
paste(..., sep = " ")
}
# 7. Create a View
# %|% is a operator to concat characters
statement <- "CREATE VIEW capitals_tops_20 AS" %|%
"SELECT * FROM capitals_world ORDER BY population DESC LIMIT 20;"
statement
dbSendQuery(con, statement) # Execute a query on the database
# 8. Create a View
dbGetQuery(con, "SELECT * FROM capitals_top_20;")
con
# 7. Create a View
# %|% is a operator to concat characters
statement <- "CREATE VIEW capitals_tops_20 AS" %|%
"SELECT * FROM capitals_world ORDER BY population DESC LIMIT 20;"
dbSendQuery(con, statement) # Execute a query on the database
# 8. Create a View
dbGetQuery(con, "SELECT * FROM capitals_top_20;")
# 8. Create a View
dbReadTable(con, "SELECT * FROM capitals_top_20;")
dbListTables(db)
dbListTables(db, schema="sch2014")
dbListTables(con, schema="sch2014")
dbListTables(con, schema="capitals_tops_20")
dbListTables(con)
# 7. Create a View
# %|% is a operator to concat characters
statement <- "CREATE VIEW capitals_tops_20 AS" %|%
"SELECT * FROM capitals_world ORDER BY population DESC LIMIT 20;"
dbSendQuery(con, statement) # Execute a query on the database
# 8. Create a View
dbGetQuery(con, "SELECT * FROM capitals_top_20;")
statement
# 7. Create a View
# %|% is a operator to concat characters
statement <- "CREATE VIEW capitals_tops_20 AS" %|%
"SELECT * FROM capitals_world ORDER BY population DESC LIMIT 20;"
statement
# 8. Create a View
dbGetQuery(con, "SELECT * FROM capitals_tops_20;")
# 8. Run
dbGetQuery(con, "SELECT * FROM capitals_tops_20;")
# 8. Run
dbGetQuery(con, "SELECT * FROM capitals_tops_20;")
# 8. Send a query and retrieve results - III
dbGetQuery(con, "SELECT * FROM capitals_tops_20;")
# 9. Updating a view
statement <- "UPDATE capitals_world" %|%
"SET population = population + 300000" %|%
"WHERE city = 'Singapore';"
statement
# 9. Updating a view
statement <- "UPDATE capitals_world" %|%
"SET population = population + 300000" %|%
"WHERE city = 'Singapore';"
# 9. Updating a view
statement <- "UPDATE capitals_world" %|%
"SET population = population + 300000" %|%
"WHERE city = 'Singapore';"
dbSendQuery(con, statement) # Execute a query on the database
# 10. Updating a view
statement <- "SELECT AVG(population)" %|%
"FROM capitals_world;"
# 10. Updating a view
statement <- "SELECT AVG(population)" %|%
"FROM capitals_world;"
# 9. Updating a view
statement <- "UPDATE capitals_world" %|%
"SET population = population + 300000" %|%
"WHERE city = 'Singapore';"
dbSendQuery(con, statement) # Execute a query on the database
# 9. Updating a view
statement <- "UPDATE capitals_world" %|%
"SET population = population + 300000" %|%
"WHERE city = 'Singapore';"
# 7. Create a View
# %|% is a operator to concat characters
statement <- "CREATE VIEW capitals_tops_20 AS" %|%
"SELECT * FROM capitals_world ORDER BY population DESC LIMIT 20;"
dbSendQuery(con, statement) # Execute a query on the database
# 10. Updating a view
statement <- "SELECT AVG(population)" %|%
"FROM capitals_world;"
statement
dbGetQuery(con, statement)
# 10. Send a query and retrieve results - IV
statement <- "SELECT AVG(population)" %|%
"FROM capitals_world;"
dbGetQuery(con, statement)
# 11. Send a query and retrieve results - V
statement <- "SELECT *" %|%
"FROM capitals_world;" %|%
"WHERE population>AVG(population);"
dbGetQuery(con, statement)
# 11. Send a query and retrieve results - V
statement <- "SELECT *" %|%
"FROM capitals_world;" %|%
"WHERE population>AVG(population);"
dbGetQuery(con, statement)
# 11. Send a query and retrieve results - V
statement <- "SELECT *" %|%
"FROM capitals_world;" %|%
"WHERE population > AVG(population);"
dbGetQuery(con, statement)
# 11. Send a query and retrieve results - V
statement <- "SELECT *" %|%
"FROM capitals_world" %|%
"WHERE population > AVG(population);"
dbGetQuery(con, statement)
statement
# 12. Send a query and retrieve results - VI (Subquery)
statement <- "SELECT *" %|%
"FROM capitals_world" %|%
"WHERE population > (" %|%
"  SELECT AVG(population)" %|%
"  FROM capitals_world" %|%
");"
dbGetQuery(con, statement)
dbGetQuery(con, statement)
# 13. Send a query and retrieve results - VI (Subquery)
statement <- "SELECT *" %|%
"FROM capitals_world" %|%
"WHERE population > (" %|%
"  SELECT AVG(population)" %|%
"  FROM capitals_world" %|%
");"
dbGetQuery(con, statement)
# 12. Send a query and retrieve results - VI (Subquery)
statement <- "SELECT *" %|%
"FROM capitals_world" %|%
"WHERE population > (" %|%
"  SELECT AVG(population)" %|%
"  FROM capitals_world" %|%
");"
dbGetQuery(con, statement)
# 13. Send a query and retrieve results - VI (Subquery)
statement <- "SELECT *" %|%
"FROM capitals_world" %|%
"WHERE population > (" %|%
"  SELECT AVG(population)" %|%
"  FROM capitals_world" %|%
");"
dbGetQuery(con, statement)
# 14. Send a query and retrieve results - VII (Subquery)
statement <- "SELECT cap.*" %|%
"FROM capitals_world as cap, (" %|%
"  SELECT AVG(population) AS average_population" %|%
"  FROM capitals_world) AS average" %|%
"WHERE cap.population > average.average_population" %|%
");"
dbGetQuery(con, statement)
# 14. Send a query and retrieve results - VII (Subquery)
statement <- "SELECT cap.*" %|%
"FROM capitals_world as cap, (" %|%
"  SELECT AVG(population) AS average_population" %|%
"  FROM capitals_world) AS average" %|%
"WHERE cap.population > average.average_population" %|%
";"
dbGetQuery(con, statement)
# 14. Send a query and retrieve results - VII (Subquery)
statement <- "SELECT cap.*" %|%
"FROM capitals_world as cap, (" %|%
"  SELECT AVG(population) AS average_population" %|%
"  FROM capitals_world) AS average" %|%
"WHERE cap.population > average.average_population" %|%
";"
# 14. Send a query and retrieve results - VII (Subquery)
statement <- "SELECT cap.*" %|%
"FROM capitals_world as cap, (" %|%
"  SELECT AVG(population) AS average_population" %|%
"  FROM capitals_world) AS average" %|%
"WHERE cap.population > average.average_population" %|%
";"
dbGetQuery(con, statement)
knitr::opts_chunk$set(echo = TRUE)
con <- RPostgreSQL::dbConnect(
drv = drv,
dbname = "spdb_course",
host = "localhost",
user = "csaybar",
password = "lesly",
port = 5432
)
```{r}
library("RPostgreSQL")
source("../postgis/utils.R") # Utils to use POSTGIS with R!
```{r eval=FALSE}
statement <- "CREATE VIEW capitals_tops_20 AS" %|%
"SELECT * FROM capitals_world ORDER BY population DESC LIMIT 20;"
statement
```{r eval=FALSE}
# 9. Updating a view
statement <- "UPDATE capitals_world" %|%
"SET population = population + 300000" %|%
"WHERE city = 'Singapore';"
# 9. Updating a view
statement <- "UPDATE capitals_world" %|%
"SET population = population + 300000" %|%
"WHERE city = 'Singapore';"
dbSendQuery(con, statement) # Execute a query on the database
# 8. Send a query and retrieve results - III
dbGetQuery(con, "SELECT * FROM capitals_tops_20;")
# 7. Create a View
# %|% is a operator to concat characters
statement <- "CREATE VIEW capitals_tops_20 AS" %|%
"SELECT * FROM capitals_world ORDER BY population DESC LIMIT 20;"
dbSendQuery(con, statement) # Execute a query on the database
dbSendQuery(con, "DROP VIEW capitals_tops_20") # Execute a query on the database
dbSendQuery(con, "DROP VIEW capitals_tops_20") # Execute a query on the database
# 7. Create a View
# %|% is a operator to concat characters
statement <- "CREATE VIEW capitals_tops_20 AS" %|%
"SELECT * FROM capitals_world ORDER BY population DESC LIMIT 20;"
dbSendQuery(con, statement) # Execute a query on the database
# 8. Send a query and retrieve results - III
dbGetQuery(con, "SELECT * FROM capitals_tops_20;")
# 9. Updating a view
statement <- "UPDATE capitals_world" %|%
"SET population = population + 300000" %|%
"WHERE city = 'Singapore';"
dbSendQuery(con, statement) # Execute a query on the database
dbSendQuery(con, "DROP VIEW capitals_tops_20") # Execute a query on the database
dbSendQuery(con, "DROP VIEW capitals_tops_20") # Execute a query on the database
