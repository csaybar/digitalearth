overlayGroups = c("Motorways", "Kindergartens"),
options = layersControlOptions(collapsed = FALSE)
) %>%
addLegend("bottomleft", pal = pal_class, values = ~classes,
title = "",
opacity = 1
)
factor(fct_class, c("Very low", "Low", "Medium", "High"))
library(leaflet)
library(htmltools)
library(mapview)
library(sf)
set.seed(10)
# Read the data
kinder <- read_sf("data/kindergarden.shp.shp") %>%
cbind(st_coordinates(.$geometry))
motor <- read_sf("data/motorway.shp.shp")
kinder$PLAETZE_sqrt  <- sqrt(kinder$PLAETZE)*1.5
min_distance <- sapply(seq_len(nrow(kinder)), function(x) min(st_distance(kinder[x,], motor)))
kinder$min_distance <- min_distance
kinder$classes <- kmeans(kinder$min_distance, 4)$cluster
# Ordering classes
fct_class <- as.factor(kinder$classes)
levels(fct_class) <- c("Low", "Very low", "Medium", "High")
fct_class <- factor(fct_class, c("Very low", "Low", "Medium", "High"))
kinder$classes <- fct_class
kinder$pop_message_map01  <- paste(
sep = "<br/>",
sprintf("<strong>name:</strong> %s", kinder$NAME),
sprintf("<strong>seats:</strong> %s", kinder$min_distance)
)
kinder$pop_message_map02  <- paste(
sep = "<br/>",
sprintf("<strong>name:</strong> %s", kinder$NAME),
sprintf("<strong>distance:</strong> %s meters", round(kinder$min_distance))
)
kinder$pop_message_map03  <- paste(
sep = "<br/>",
sprintf("<strong>name:</strong> %s", kinder$NAME),
sprintf("<strong>class:</strong> %s", kinder$classes)
)
pal <- colorNumeric(
palette = "YlOrRd",
domain = kinder$min_distance
)
pal_class <- colorFactor(
palette = "RdYlBu",
domain = kinder$classes,
n = 4
)
# Map 3
leaflet(kinder) %>%
setView(13.03982, 47.79800, 12) %>%
addProviderTiles("Esri.WorldImagery", group = "ESRI basemap") %>%
addProviderTiles(providers$CartoDB.Voyager, group = "Carto basemap") %>%
addPolylines(data = motor, color = "red", group="Motorways") %>%
addCircleMarkers(lng = ~X,
lat = ~Y,
weight = 1.5,
color = "black",
fillColor = ~colorFactor("RdYlBu", classes)(classes),
opacity = 1,
fillOpacity = 1,
group = "Kindergartens",
popup = ~pop_message_map03) %>%
addLayersControl(
baseGroups = c("Carto basemap", "ESRI basemap"),
overlayGroups = c("Motorways", "Kindergartens"),
options = layersControlOptions(collapsed = FALSE)
) %>%
addLegend("bottomleft", pal = pal_class, values = ~classes,
title = "",
opacity = 1
)
pal_class <- colorFactor(
palette = "BuYlRd",
domain = kinder$classes,
n = 4
)
# Map 3
leaflet(kinder) %>%
setView(13.03982, 47.79800, 12) %>%
addProviderTiles("Esri.WorldImagery", group = "ESRI basemap") %>%
addProviderTiles(providers$CartoDB.Voyager, group = "Carto basemap") %>%
addPolylines(data = motor, color = "red", group="Motorways") %>%
addCircleMarkers(lng = ~X,
lat = ~Y,
weight = 1.5,
color = "black",
fillColor = ~colorFactor("RdYlBu", classes)(classes),
opacity = 1,
fillOpacity = 1,
group = "Kindergartens",
popup = ~pop_message_map03) %>%
addLayersControl(
baseGroups = c("Carto basemap", "ESRI basemap"),
overlayGroups = c("Motorways", "Kindergartens"),
options = layersControlOptions(collapsed = FALSE)
) %>%
addLegend("bottomleft", pal = pal_class, values = ~classes,
title = "",
opacity = 1
)
pal_class <- colorFactor(
palette = "RdYlBu",
domain = kinder$classes,
reverse = TRUE,
n = 4
)
# Map 3
leaflet(kinder) %>%
setView(13.03982, 47.79800, 12) %>%
addProviderTiles("Esri.WorldImagery", group = "ESRI basemap") %>%
addProviderTiles(providers$CartoDB.Voyager, group = "Carto basemap") %>%
addPolylines(data = motor, color = "red", group="Motorways") %>%
addCircleMarkers(lng = ~X,
lat = ~Y,
weight = 1.5,
color = "black",
fillColor = ~colorFactor("RdYlBu", classes)(classes),
opacity = 1,
fillOpacity = 1,
group = "Kindergartens",
popup = ~pop_message_map03) %>%
addLayersControl(
baseGroups = c("Carto basemap", "ESRI basemap"),
overlayGroups = c("Motorways", "Kindergartens"),
options = layersControlOptions(collapsed = FALSE)
) %>%
addLegend("bottomleft", pal = pal_class, values = ~classes,
title = "",
opacity = 1
)
library(leaflet)
library(htmltools)
library(mapview)
library(sf)
set.seed(10)
# Read the data
kinder <- read_sf("data/kindergarden.shp.shp") %>%
cbind(st_coordinates(.$geometry))
motor <- read_sf("data/motorway.shp.shp")
kinder$PLAETZE_sqrt  <- sqrt(kinder$PLAETZE)*1.5
min_distance <- sapply(seq_len(nrow(kinder)), function(x) min(st_distance(kinder[x,], motor)))
kinder$min_distance <- min_distance
kinder$classes <- kmeans(kinder$min_distance, 4)$cluster
# Ordering classes
fct_class <- as.factor(kinder$classes)
levels(fct_class) <- c("Low", "Very low", "Medium", "High")
fct_class <- factor(fct_class, c("Very low", "Low", "Medium", "High"))
kinder$classes <- fct_class
kinder$pop_message_map01  <- paste(
sep = "<br/>",
sprintf("<strong>name:</strong> %s", kinder$NAME),
sprintf("<strong>seats:</strong> %s", kinder$min_distance)
)
kinder$pop_message_map02  <- paste(
sep = "<br/>",
sprintf("<strong>name:</strong> %s", kinder$NAME),
sprintf("<strong>distance:</strong> %s meters", round(kinder$min_distance))
)
kinder$pop_message_map03  <- paste(
sep = "<br/>",
sprintf("<strong>name:</strong> %s", kinder$NAME),
sprintf("<strong>class:</strong> %s", kinder$classes)
)
pal <- colorNumeric(
palette = "YlOrRd",
domain = kinder$min_distance
)
pal_class <- colorFactor(
palette = "RdYlBu",
domain = kinder$classes,
reverse = TRUE,
n = 4
)
# Map 3
leaflet(kinder) %>%
setView(13.03982, 47.79800, 12) %>%
addProviderTiles("Esri.WorldImagery", group = "ESRI basemap") %>%
addProviderTiles(providers$CartoDB.Voyager, group = "Carto basemap") %>%
addPolylines(data = motor, color = "red", group="Motorways") %>%
addCircleMarkers(lng = ~X,
lat = ~Y,
weight = 1.5,
color = "black",
fillColor = ~colorFactor("RdYlBu", classes)(classes),
opacity = 1,
fillOpacity = 1,
group = "Kindergartens",
popup = ~pop_message_map03) %>%
addLayersControl(
baseGroups = c("Carto basemap", "ESRI basemap"),
overlayGroups = c("Motorways", "Kindergartens"),
options = layersControlOptions(collapsed = FALSE)
) %>%
addLegend("bottomleft", pal = pal_class, values = ~classes,
title = "",
opacity = 1
)
pal_class <- colorFactor(
palette = "RdYlBu",
domain = kinder$classes,
reverse = TRUE,
n = 4
)
# Map 3
leaflet(kinder) %>%
setView(13.03982, 47.79800, 12) %>%
addProviderTiles("Esri.WorldImagery", group = "ESRI basemap") %>%
addProviderTiles(providers$CartoDB.Voyager, group = "Carto basemap") %>%
addPolylines(data = motor, color = "red", group="Motorways") %>%
addCircleMarkers(lng = ~X,
lat = ~Y,
weight = 1.5,
color = "black",
fillColor = ~colorFactor("RdYlBu", reverse = TRUE, classes)(classes),
opacity = 1,
fillOpacity = 1,
group = "Kindergartens",
popup = ~pop_message_map03) %>%
addLayersControl(
baseGroups = c("Carto basemap", "ESRI basemap"),
overlayGroups = c("Motorways", "Kindergartens"),
options = layersControlOptions(collapsed = FALSE)
) %>%
addLegend("bottomleft", pal = pal_class, values = ~classes,
title = "",
opacity = 1
)
library(leaflet)
library(htmltools)
library(mapview)
library(sf)
# Read the data
kinder <- read_sf("data/kindergarden.shp.shp") %>%
cbind(st_coordinates(.$geometry))
motor <- read_sf("data/motorway.shp.shp")
kinder$PLAETZE_sqrt  <- sqrt(kinder$PLAETZE)*1.5
min_distance <- sapply(seq_len(nrow(kinder)), function(x) min(st_distance(kinder[x,], motor)))
kinder$min_distance <- min_distance
kinder$pop_message_map01  <- paste(
sep = "<br/>",
sprintf("<strong>name:</strong> %s", kinder$NAME),
sprintf("<strong>seats:</strong> %s", kinder$min_distance)
)
kinder$pop_message_map02  <- paste(
sep = "<br/>",
sprintf("<strong>name:</strong> %s", kinder$NAME),
sprintf("<strong>distance:</strong> %s meters", round(kinder$min_distance))
)
pal <- colorNumeric(
palette = "YlOrRd",
domain = kinder$min_distance
)
leaflet(kinder) %>%
setView(13.03982, 47.79800, 12) %>%
addProviderTiles("Esri.WorldImagery", group = "ESRI basemap") %>%
addProviderTiles(providers$CartoDB.Voyager, group = "Carto basemap") %>%
addPolylines(data = motor, color = "red", group="Motorways") %>%
addCircleMarkers(lng = ~X,
lat = ~Y,
weight = 1.5,
color = "black",
fillColor = ~colorFactor("RdYlBu", reverse = TRUE, classes)(classes),
opacity = 1,
fillOpacity = 1,
group = "Kindergartens",
popup = ~pop_message_map03) %>%
addLayersControl(
baseGroups = c("Carto basemap", "ESRI basemap"),
overlayGroups = c("Motorways", "Kindergartens"),
options = layersControlOptions(collapsed = FALSE)
) %>%
addLegend("bottomleft", pal = pal_class, values = ~classes,
title = "",
opacity = 1
)
library(leaflet)
library(htmltools)
library(mapview)
library(sf)
set.seed(10)
# Read the data
kinder <- read_sf("data/kindergarden.shp.shp") %>%
cbind(st_coordinates(.$geometry))
motor <- read_sf("data/motorway.shp.shp")
kinder$PLAETZE_sqrt  <- sqrt(kinder$PLAETZE)*1.5
min_distance <- sapply(seq_len(nrow(kinder)), function(x) min(st_distance(kinder[x,], motor)))
kinder$min_distance <- min_distance
kinder$classes <- kmeans(kinder$min_distance, 4)$cluster
# Ordering classes
fct_class <- as.factor(kinder$classes)
levels(fct_class) <- c("Low", "Very low", "Medium", "High")
fct_class <- factor(fct_class, c("Very low", "Low", "Medium", "High"))
kinder$classes <- fct_class
kinder$pop_message_map01  <- paste(
sep = "<br/>",
sprintf("<strong>name:</strong> %s", kinder$NAME),
sprintf("<strong>seats:</strong> %s", kinder$min_distance)
)
kinder$pop_message_map02  <- paste(
sep = "<br/>",
sprintf("<strong>name:</strong> %s", kinder$NAME),
sprintf("<strong>distance:</strong> %s meters", round(kinder$min_distance))
)
kinder$pop_message_map03  <- paste(
sep = "<br/>",
sprintf("<strong>name:</strong> %s", kinder$NAME),
sprintf("<strong>class:</strong> %s", kinder$classes)
)
pal <- colorNumeric(
palette = "YlOrRd",
domain = kinder$min_distance
)
pal_class <- colorFactor(
palette = "RdYlBu",
domain = kinder$classes,
reverse = TRUE,
n = 4
)
diamonds
p <- ggplot(data = diamonds, aes(x = cut, fill = clarity)) +
geom_bar(position = "dodge")
library(ggplot2)
p <- ggplot(data = diamonds, aes(x = cut, fill = clarity)) +
geom_bar(position = "dodge")
p
kinder
kinder
kinder$classes
kinder$classes
p <- ggplot(data = kinder, aes(x = classes, fill = PLAETZE)) +
geom_bar(position = "dodge")
p
diamonds
diamonds$clarity
PLAETZE
kinder$PLAETZE
kinder$PLAETZE
cut(kinder$PLAETZE)
stat()
stat(kinder$PLAETZE)
stat(kinder$PLAETZE)
summary(kinder$PLAETZE)
kinder$PLAETZE
hist(kinder$PLAETZE)
pretty
pretty(kinder$PLAETZE, 5)
kinder$PLAETZE_class <- pretty(kinder$PLAETZE, 5)
pretty(kinder$PLAETZE, 5)
kinder$PLAETZE_class <- cut(kinder$PLAETZE, pretty(kinder$PLAETZE, 5))
kinder$PLAETZE_class
p <- ggplot(data = kinder, aes(x = classes, fill = PLAETZE)) +
geom_bar(position = "dodge")
p <- ggplot(data = kinder, aes(x = classes, fill = PLAETZE_class)) +
geom_bar(position = "dodge")
ggplotly(p)
p
classInt::classIntervals(kinder$PLAETZE, 5,"sd")
cut(kinder$PLAETZE, classInt::classIntervals(kinder$PLAETZE, 5,"sd"))
classInt::classIntervals(kinder$PLAETZE, 5,"sd")
classInt::classIntervals(kinder$PLAETZE, 5,"sd")
classInt::classIntervals(kinder$PLAETZE, 3,"sd")
classInt::classIntervals(kinder$PLAETZE, 4,"sd")
classInt::classIntervals(kinder$PLAETZE, 4,"sd", style = "headtails")
classInt::classIntervals(kinder$PLAETZE, 4,"sd", style = "headtails")
classInt::classIntervals(kinder$PLAETZE, 4,"sd")
classInt::classIntervals(kinder$PLAETZE, 4,"quantile")
names(classInt::classIntervals(kinder$PLAETZE, 4,"quantile"))
dasda <- classInt::classIntervals(kinder$PLAETZE, 4,"quantile")
dasda$var
dasda$brks
kinder$PLAETZE_class <- cut(kinder$PLAETZE, dasda$brks)
p <- ggplot(data = kinder, aes(x = classes, fill = PLAETZE_class)) +
geom_bar(position = "dodge")
ggplotly(p)
p
kinder$PLAETZE
classInt::classIntervals(kinder$PLAETZE, 4,"quantile")
kinder$PLAETZE
dasda <- classInt::classIntervals(kinder$PLAETZE, 4,"quantile", dataPrecision = 1)
kinder$PLAETZE_class <- cut(kinder$PLAETZE, dasda$brks)
p <- ggplot(data = kinder, aes(x = classes, fill = PLAETZE_class)) +
geom_bar(position = "dodge")
p
kinder$PLAETZE_class <- cut(kinder$PLAETZE, dasda$brks, include.lowest = TRUE)
p <- ggplot(data = kinder, aes(x = classes, fill = PLAETZE_class)) +
geom_bar(position = "dodge")
p
dasda <- classInt::classIntervals(kinder$PLAETZE, 4,"sd", dataPrecision = 1)
kinder$PLAETZE_class <- cut(kinder$PLAETZE, dasda$brks, include.lowest = TRUE)
p <- ggplot(data = kinder, aes(x = classes, fill = PLAETZE_class)) +
geom_bar(position = "dodge")
p
dasda <- classInt::classIntervals(kinder$PLAETZE, 4, "kmeans", dataPrecision = 1)
kinder$PLAETZE_class <- cut(kinder$PLAETZE, dasda$brks, include.lowest = TRUE)
p <- ggplot(data = kinder, aes(x = classes, fill = PLAETZE_class)) +
geom_bar(position = "dodge")
p
dasda <- classInt::classIntervals(kinder$PLAETZE, 4, "jenks", dataPrecision = 1)
kinder$PLAETZE_class <- cut(kinder$PLAETZE, dasda$brks, include.lowest = TRUE)
p <- ggplot(data = kinder, aes(x = classes, fill = PLAETZE_class)) +
geom_bar(position = "dodge")
p
dasda <- classInt::classIntervals(kinder$PLAETZE, 4, "fisher", dataPrecision = 1)
kinder$PLAETZE_class <- cut(kinder$PLAETZE, dasda$brks, include.lowest = TRUE)
p <- ggplot(data = kinder, aes(x = classes, fill = PLAETZE_class)) +
geom_bar(position = "dodge")
p
dasda <- classInt::classIntervals(kinder$PLAETZE, 4, "headtails", dataPrecision = 1)
kinder$PLAETZE_class <- cut(kinder$PLAETZE, dasda$brks, include.lowest = TRUE)
p <- ggplot(data = kinder, aes(x = classes, fill = PLAETZE_class)) +
geom_bar(position = "dodge")
p
dasda <- classInt::classIntervals(kinder$PLAETZE, 5, "bclust", dataPrecision = 1)
kinder$PLAETZE_class <- cut(kinder$PLAETZE, dasda$brks, include.lowest = TRUE)
p <- ggplot(data = kinder, aes(x = classes, fill = PLAETZE_class)) +
geom_bar(position = "dodge")
p
dasda <- classInt::classIntervals(kinder$PLAETZE, 5, "sd", dataPrecision = 1)
kinder$PLAETZE_class <- cut(kinder$PLAETZE, dasda$brks, include.lowest = TRUE)
p <- ggplot(data = kinder, aes(x = classes, fill = PLAETZE_class)) +
geom_bar(position = "dodge")
p
dasda <- classInt::classIntervals(kinder$PLAETZE, 5, "quantile", dataPrecision = 1)
kinder$PLAETZE_class <- cut(kinder$PLAETZE, dasda$brks, include.lowest = TRUE)
p <- ggplot(data = kinder, aes(x = classes, fill = PLAETZE_class)) +
geom_bar(position = "dodge")
p
dasda <- classInt::classIntervals(kinder$PLAETZE, 4, "quantile", dataPrecision = 1)
kinder$PLAETZE_class <- cut(kinder$PLAETZE, dasda$brks, include.lowest = TRUE)
p <- ggplot(data = kinder, aes(x = classes, fill = PLAETZE_class)) +
geom_bar(position = "dodge")
p
installed.packages("ggplotly")
installed.packages("ggplotly")
installed.package("ggplotly")
install.packages("ggplotly")
install.packages("ggplotly")
install.packages("plotly")
library(plotly)
ggplotly(p)
library(plotly)
p <- ggplot(data = diamonds, aes(x = cut, fill = clarity)) +
geom_bar(position = "dodge")
ggplotly(p)
p <- ggplot(data = kinder, aes(x = classes, fill = PLAETZE_class)) +
geom_bar(position = "dodge") +
scale_colour_viridis_d()
p
ggplotly(p)
p <- ggplot(data = kinder, aes(x = classes, fill = PLAETZE_class)) +
geom_bar(position = "dodge") +
scale_colour_viridis_d()
p
p <- ggplot(data = kinder, aes(x = classes, fill = PLAETZE_class)) +
geom_bar(position = "dodge") +
scale_colour_viridis_b()
p
p <- ggplot(data = kinder, aes(x = classes, fill = PLAETZE_class)) +
geom_bar(position = "dodge") +
scale_colour_viridis_d()
p
p <- ggplot(data = kinder, aes(x = classes, fill = PLAETZE_class)) +
scale_colour_viridis_d() +
geom_bar(position = "dodge")
p
PLAETZE_class
diamonds$clarity
class(diamonds$clarity)
dasda
kinder$PLAETZE
cut(kinder$PLAETZE, dasda$brks, include.lowest = TRUE)
plaetze_cut <- classInt::classIntervals(kinder$PLAETZE, 4, "quantile", dataPrecision = 1)
plaetze_cut
plaetze_cut$brks
plaetze_cut$brks
cut(kinder$PLAETZE, plaetze_cut$brks, include.lowest = TRUE)
cut(kinder$PLAETZE, plaetze_cut$brks, include.lowest = TRUE)
plaetze_classes <- classInt::classIntervals(kinder$PLAETZE, 4, "quantile", dataPrecision = 1)
cut(kinder$PLAETZE, plaetze_classes$brks, include.lowest = TRUE)
plaetze_cut <- cut(kinder$PLAETZE, plaetze_classes$brks, include.lowest = TRUE)
plaetze_cut
factor(plaetze_cut, levels(plaetze_cut), ordered = TRUE)
plaetze_classes <- classInt::classIntervals(kinder$PLAETZE, 4, "quantile", dataPrecision = 1)
plaetze_cut <- cut(kinder$PLAETZE, plaetze_classes$brks, include.lowest = TRUE)
plaetze_cut <- factor(plaetze_cut, levels(plaetze_cut), ordered = TRUE)
plaetze_cut
plaetze_cut_order <- factor(plaetze_cut, levels(plaetze_cut), ordered = TRUE)
plaetze_cut_order
kinder$PLAETZE_class <- plaetze_cut_order
kinder
p <- ggplot(data = kinder, aes(x = classes, fill = PLAETZE_class)) +
geom_bar(position = "dodge")
p
ggplotly(p)
plaetze_classes <- classInt::classIntervals(kinder$PLAETZE, 5, "quantile", dataPrecision = 1)
plaetze_cut <- cut(kinder$PLAETZE, plaetze_classes$brks, include.lowest = TRUE)
plaetze_cut_order <- factor(plaetze_cut, levels(plaetze_cut), ordered = TRUE)
kinder$PLAETZE_class <- plaetze_cut_order
p <- ggplot(data = kinder, aes(x = classes, fill = PLAETZE_class)) +
geom_bar(position = "dodge")
p
plaetze_classes <- classInt::classIntervals(kinder$PLAETZE, 4, "quantile", dataPrecision = 1)
plaetze_cut <- cut(kinder$PLAETZE, plaetze_classes$brks, include.lowest = TRUE)
plaetze_cut_order <- factor(plaetze_cut, levels(plaetze_cut), ordered = TRUE)
kinder$PLAETZE_class <- plaetze_cut_order
p <- ggplot(data = kinder, aes(x = classes, fill = PLAETZE_class)) +
geom_bar(position = "dodge")
p
ggplotly(p)
