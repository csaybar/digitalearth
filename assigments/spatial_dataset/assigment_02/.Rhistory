from src import utils
import os
from src import utils
from pathlib import Path
from src import utils
import os
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
library("RPostgreSQL")
source("../postgis/utils.R") # Utils to use POSTGIS with R!
# 1. load the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# 2. create a connection to the postgres database
con <- RPostgreSQL::dbConnect(
drv = drv,
dbname = "spdb_course",
host = "localhost",
user = "csaybar",
password = "csaybar",
port = 5433
)
library("RPostgreSQL")
source("../postgis/utils.R") # Utils to use POSTGIS with R!
# 1. load the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# 2. create a connection to the postgres database
con <- RPostgreSQL::dbConnect(
drv = drv,
dbname = "spdb_course",
host = "localhost",
user = "csaybar",
password = "csaybar",
port = 5433
)
library("RPostgreSQL")
library("sf")
source("../postgis/utils.R") # Utils to use POSTGIS with R!
# 1. load the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# 2. create a connection to the postgres database
con <- RPostgreSQL::dbConnect(
drv = drv,
dbname = "spdb_course",
host = "localhost",
user = "csaybar",
password = "csaybar",
port = 5432
)
library("RPostgreSQL")
library("sf")
source("../postgis/utils.R") # Utils to use POSTGIS with R!
# 1. load the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
library("RPostgreSQL")
library("sf")
system("homework")
setwd("/home/csaybar/Documents/Github/digitalearth/assigments/spatial_dataset/")
library("RPostgreSQL")
library("sf")
source("../postgis/utils.R") # Utils to use POSTGIS with R!
setwd("/home/csaybar/Documents/Github/digitalearth/assigments/spatial_dataset/assigment_02/")
library("RPostgreSQL")
library("sf")
source("../postgis/utils.R") # Utils to use POSTGIS with R!
# 1. load the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# 2. create a connection to the postgres database
con <- RPostgreSQL::dbConnect(
drv = drv,
dbname = "spdb_course",
host = "localhost",
user = "csaybar",
password = "csaybar",
port = 5432
)
# 3. Save shapefiles in PostGIS
files_in <- list.files("data/","\\.shp$",full.names = TRUE)
tables_names <- c("salzburg_buildings", "salzburg_districts", "salzburg_roads")
for (index in seq_along(tables_names)) {
st_write(read_sf(files_in[index]), dsn = con, layer = tables_name[index]
, append = FALSE)
}
# 3. Save shapefiles in PostGIS
files_in <- list.files("data/","\\.shp$",full.names = TRUE)
tables_names <- c("salzburg_buildings", "salzburg_districts", "salzburg_roads")
tables_names
tables_names <- c("salzburg_buildings", "salzburg_districts", "salzburg_roads")
for (index in seq_along(tables_names)) {
st_write(read_sf(files_in[index]), dsn = con, layer = tables_name[index]
, append = FALSE)
}
tables_name
# 3. Save shapefiles in PostGIS
files_in <- list.files("data/","\\.shp$",full.names = TRUE)
tables_names <- c("salzburg_buildings", "salzburg_districts", "salzburg_roads")
for (index in seq_along(tables_names)) {
st_write(read_sf(files_in[index]), dsn = con, layer = tables_names[index]
, append = FALSE)
}
# 4. Repeat the query with all buildings, which are of type church and then repeat
#    the query to create a layer, which contains churches and schools.
query_01_01 <- "SELECT * FROM salzburg_buildings WHERE type='church';"
slzg_church <- st_read(con, query = query_01_01)
query_01_02 <- "SELECT * FROM salzburg_buildings WHERE type='church' OR type='school';"
slzg_cs <- st_read(con, query = query_01_02)
# 5. Extend the query and add a column that contains the calculated
#    area of the houses.
query_02_01 <- "SELECT b.*, ST_Area(b.geometry) as area" %|%
" FROM salzburg_buildings AS b WHERE type='school';"
slzg_area_school <- st_read(con, query = query_02_01)
slzg_area_school
plot(slzg_distance["distance"], main = "",
lwd=0.1, key.pos = NULL, reset = FALSE,
pal = viridis::viridis)
plot(slzg_area_school["distance"], main = "",
lwd=0.1, key.pos = NULL, reset = FALSE,
pal = viridis::viridis)
slzg_area_school
plot(slzg_distance["area"], main = "",
lwd=0.1, key.pos = NULL, reset = FALSE,
pal = viridis::viridis)
query_02_02 <- "SELECT b.*" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 500;"
plot(slzg_area_school["area"], main = "",
lwd=0.1, key.pos = NULL, reset = FALSE,
pal = viridis::viridis)
query_02_02 <- "SELECT b.*" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 500;"
slzg_distance <- st_read(con, query = query_02_02)
slzg_distance
query_02_02 <- "SELECT b.*" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 500;"
slzg_distance <- st_read(con, query = query_02_02)
plot(slzg_distance["area"], main = "",
lwd=0.1, key.pos = NULL, reset = FALSE,
pal = viridis::viridis)
plot(slzg_distance["distance"], main = "",
lwd=0.1, key.pos = NULL, reset = FALSE,
pal = viridis::viridis)
slzg_distance
slzg_distance
slzg_distance
query_02_02 <- "SELECT b.*" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 500;"
slzg_distance <- st_read(con, query = query_02_02)
slzg_distance
slzg_distance <- st_read(con, query = query_02_02)
slzg_distance
query_02_02 <- "SELECT b.*" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 500;"
slzg_distance <- st_read(con, query = query_02_02)
query_02_02 <- "SELECT b.*" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 500;"
slzg_distance <- st_read(con, query = query_02_02)
slzg_distance
query_02_02 <- "SELECT b.*, ST_Distance(b.geometry, g.geometry) as distance" %|%
" FROM salzburg_buildings as b," %|%
" (SELECT geom FROM salzburg_buildings WHERE name = 'Glockenturm') as g;"
slzg_area_school <- st_read(con, query = query_02_01)
slzg_distance <- st_read(con, query = query_02_01)
plot(slzg_distance["distance"], main = "",
lwd=0.1, key.pos = NULL, reset = FALSE,
pal = viridis::viridis)
slzg_distance
query_02_02 <- "SELECT b.*, ST_Distance(b.geometry, g.geometry) as distance" %|%
" FROM salzburg_buildings as b," %|%
" (SELECT geom FROM salzburg_buildings WHERE name = 'Glockenturm') as g;"
slzg_distance <- st_read(con, query = query_02_01)
plot(slzg_distance["distance"], main = "",
lwd=0.1, key.pos = NULL, reset = FALSE,
pal = viridis::viridis)
slzg_distance
query_02_02 <- "SELECT b.*, ST_Distance(b.geometry, g.geometry) as distance" %|%
" FROM salzburg_buildings as b," %|%
" (SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') as g;"
slzg_distance <- st_read(con, query = query_02_01)
slzg_distance
plot(slzg_distance["distance"], main = "",
lwd=0.1, key.pos = NULL, reset = FALSE,
pal = viridis::viridis)
slzg_distance2 <- st_read(con, query = query_02_01)
slzg_distance <- st_read(con, query = query_02_02)
plot(slzg_distance["distance"], main = "",
lwd=0.1, key.pos = NULL, reset = FALSE,
pal = viridis::viridis)
plot(slzg_distance["distance"], main = "",
lwd=0.1, key.pos = NULL, reset = FALSE,
pal = viridis::viridis)
query_02_03 <- "SELECT b.*" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 500;"
slzg_fortress <- st_read(con, query = query_02_03)
slzg_fortress
plot(slzg_fortress)
slzg_fortress
query_02_03 <- "SELECT COUNT(b.*)" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 1000;"
slzg_fortress <- st_read(con, query = query_02_03)
query_02_03 <- "SELECT COUNT(b.*)" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 1000;"
slzg_fortress <- st_read(con, query = query_02_03)
query_02_03 <- "SELECT COUNT(b.*)" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 1000;"
query_02_03
st_read(con, query = query_02_03)
query_02_02 <- "SELECT b.*, ST_Distance(b.geometry, g.geometry) as distance" %|%
" FROM salzburg_buildings as b," %|%
" (SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') as g;"
slzg_distance <- st_read(con, query = query_02_02)
slzg_df <- st_read(con, query = query_02_03)
slzg_df
query_02_03 <- "SELECT COUNT(b.*)" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 1000;"
query_02_03
slzg_df <- st_read(con, query = query_02_03)
slzg_df
# 6. Of course it is also possible to combine spatial operations and filters. What is
#    the average size of all buildings, which are within 1km distance to the fortress
#    (including the fortress itself)? Make a screenshot, which shows the query and
#    the result. and explain in your own words how the query works.
query_03_01 <- "SELECT AVG(b.*)" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 1000;"
slzg_df <- st_read(con, query = query_02_03)
slzg_df
slzg_df <- st_read(con, query = query_03_01)
# 6. Of course it is also possible to combine spatial operations and filters. What is
#    the average size of all buildings, which are within 1km distance to the fortress
#    (including the fortress itself)? Make a screenshot, which shows the query and
#    the result. and explain in your own words how the query works.
query_03_01 <- "SELECT AVG(b.*)" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 1000;"
slzg_df <- st_read(con, query = query_03_01)
slzg_df
slzg_df_avg <- st_read(con, query = query_03_01)
slzg_df_avg
# 6. Of course it is also possible to combine spatial operations and filters. What is
#    the average size of all buildings, which are within 1km distance to the fortress
#    (including the fortress itself)? Make a screenshot, which shows the query and
#    the result. and explain in your own words how the query works.
query_03_01 <- "SELECT b.*" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 1000;"
slzg_df_avg <- st_read(con, query = query_03_01)
slzg_df_avg
# 6. Of course it is also possible to combine spatial operations and filters. What is
#    the average size of all buildings, which are within 1km distance to the fortress
#    (including the fortress itself)? Make a screenshot, which shows the query and
#    the result. and explain in your own words how the query works.
query_03_01 <- "SELECT AVG(b.*)" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 1000;"
# 6. Of course it is also possible to combine spatial operations and filters. What is
#    the average size of all buildings, which are within 1km distance to the fortress
#    (including the fortress itself)? Make a screenshot, which shows the query and
#    the result. and explain in your own words how the query works.
query_03_01 <- "SELECT AVG(b.*)" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 1000;"
slzg_df_avg <- st_read(con, query = query_03_01)
slzg_df_avg
slzg_df_avg2 <- st_read(con, query = query_03_01)
# 6. Of course it is also possible to combine spatial operations and filters. What is
#    the average size of all buildings, which are within 1km distance to the fortress
#    (including the fortress itself)? Make a screenshot, which shows the query and
#    the result. and explain in your own words how the query works.
query_03_01 <- "SELECT AVG(b.*)" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 1000;"
slzg_df_avg2 <- st_read(con, query = query_03_01)
"SELECT AVG(b.*)" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 1000;"
"SELECT AVG(b.*)" %|%
"FROM salzburg_buildings AS b,"
"SELECT AVG(b.*)" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g"
"SELECT AVG(b.*)" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 1000;"
# 6. Of course it is also possible to combine spatial operations and filters. What is
#    the average size of all buildings, which are within 1km distance to the fortress
#    (including the fortress itself)? Make a screenshot, which shows the query and
#    the result. and explain in your own words how the query works.
query_03_01 <- "SELECT AVG(b.*)" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 1000;"
slzg_df_avg2 <- st_read(con, query = query_03_01)
# 6. Of course it is also possible to combine spatial operations and filters. What is
#    the average size of all buildings, which are within 1km distance to the fortress
#    (including the fortress itself)? Make a screenshot, which shows the query and
#    the result. and explain in your own words how the query works.
query_03_01 <- "SELECT AVG(b.*)" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 1000;"
slzg_df_avg2 <- st_read(con, query = query_03_01)
# 6. Of course it is also possible to combine spatial operations and filters. What is
#    the average size of all buildings, which are within 1km distance to the fortress
#    (including the fortress itself)? Make a screenshot, which shows the query and
#    the result. and explain in your own words how the query works.
query_03_01 <- "SELECT AVG(b.*)" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 1000;"
# 6. Of course it is also possible to combine spatial operations and filters. What is
#    the average size of all buildings, which are within 1km distance to the fortress
#    (including the fortress itself)? Make a screenshot, which shows the query and
#    the result. and explain in your own words how the query works.
query_03_01 <- "SELECT COUNT(b.*)" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 1000;"
slzg_df_avg2 <- st_read(con, query = query_03_01)
slzg_df_avg2
# 6. Of course it is also possible to combine spatial operations and filters. What is
#    the average size of all buildings, which are within 1km distance to the fortress
#    (including the fortress itself)? Make a screenshot, which shows the query and
#    the result. and explain in your own words how the query works.
query_03_01 <- "SELECT COUNT(b.*)" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 1000;"
# 6. Of course it is also possible to combine spatial operations and filters. What is
#    the average size of all buildings, which are within 1km distance to the fortress
#    (including the fortress itself)? Make a screenshot, which shows the query and
#    the result. and explain in your own words how the query works.
query_03_01 <- "SELECT AVG(b.*)" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 1000;"
slzg_df_avg2 <- st_read(con, query = query_03_01)
# 6. Of course it is also possible to combine spatial operations and filters. What is
#    the average size of all buildings, which are within 1km distance to the fortress
#    (including the fortress itself)? Make a screenshot, which shows the query and
#    the result. and explain in your own words how the query works.
query_03_01 <- "SELECT b.*" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 1000;"
slzg_df_avg2 <- st_read(con, query = query_03_01)
slzg_df_avg2
slzg_df_avg2$type
slzg_df_avg2$name
slzg_df_avg2$code
# 6. Of course it is also possible to combine spatial operations and filters. What is
#    the average size of all buildings, which are within 1km distance to the fortress
#    (including the fortress itself)? Make a screenshot, which shows the query and
#    the result. and explain in your own words how the query works.
query_03_01 <- "SELECT AVG(b.*)" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 1000;"
query_03_01
slzg_df_avg2 <- st_read(con, query = query_03_01)
"SELECT AVG(b.*)" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 1000;"
# 6. Of course it is also possible to combine spatial operations and filters. What is
#    the average size of all buildings, which are within 1km distance to the fortress
#    (including the fortress itself)? Make a screenshot, which shows the query and
#    the result. and explain in your own words how the query works.
query_03_01 <- "SELECT AVG(b.*)" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 1000;"
# 6. Of course it is also possible to combine spatial operations and filters. What is
#    the average size of all buildings, which are within 1km distance to the fortress
#    (including the fortress itself)? Make a screenshot, which shows the query and
#    the result. and explain in your own words how the query works.
query_03_01 <- "SELECT AVG(g.*)" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 1000;"
slzg_df_avg2 <- st_read(con, query = query_03_01)
# 6. Of course it is also possible to combine spatial operations and filters. What is
#    the average size of all buildings, which are within 1km distance to the fortress
#    (including the fortress itself)? Make a screenshot, which shows the query and
#    the result. and explain in your own words how the query works.
query_03_01 <- "SELECT AVG(b.*)" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 1000;"
slzg_distance
read_sf(files_in[index])
read_sf(files_in[index])
# 6. Of course it is also possible to combine spatial operations and filters. What is
#    the average size of all buildings, which are within 1km distance to the fortress
#    (including the fortress itself)? Make a screenshot, which shows the query and
#    the result. and explain in your own words how the query works.
query_03_01 <- "SELECT AVG(b.*), ST_Area(b.geometry) as area" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 1000;"
# 6. Of course it is also possible to combine spatial operations and filters. What is
#    the average size of all buildings, which are within 1km distance to the fortress
#    (including the fortress itself)? Make a screenshot, which shows the query and
#    the result. and explain in your own words how the query works.
query_03_01 <- "SELECT AVG(area), ST_Area(b.geometry) as area" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 1000;"
slzg_df_avg2 <- st_read(con, query = query_03_01)
# 6. Of course it is also possible to combine spatial operations and filters. What is
#    the average size of all buildings, which are within 1km distance to the fortress
#    (including the fortress itself)? Make a screenshot, which shows the query and
#    the result. and explain in your own words how the query works.
query_03_01 <- "SELECT AVG(ST_Area(b.geometry))" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 1000;"
slzg_df_avg2 <- st_read(con, query = query_03_01)
slzg_df_avg2
read_sf(files_in[index])
# 6. Of course it is also possible to combine spatial operations and filters. What is
#    the average size of all buildings, which are within 1km distance to the fortress
#    (including the fortress itself)? Make a screenshot, which shows the query and
#    the result. and explain in your own words how the query works.
query_03_01 <- "SELECT AVG(ST_Area(b.geometry))" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) <= 1000;"
slzg_df_avg2 <- st_read(con, query = query_03_01)
slzg_df_avg2
slzg_df_avg2
read_sf(files_in[index])
ddd <- read_sf(files_in[index])
ddd$fclass
ddd$layer
ddd
View(ddd)
ddd$name
na.omit(ddd$name)
na.omit(ddd$name)
as.character(na.omit(ddd$name))
as.character(na.omit(ddd$name))
as.character(na.omit(ddd$name)) == "fortress"
which(as.character(na.omit(ddd$name)) == "fortress")
# 6. Of course it is also possible to combine spatial operations and filters. What is
#    the average size of all buildings, which are within 1km distance to the fortress
#    (including the fortress itself)? Make a screenshot, which shows the query and
#    the result. and explain in your own words how the query works.
query_03_01 <- "SELECT AVG(ST_Area(b.geometry))" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) <= 1000;"
slzg_df_avg2 <- st_read(con, query = query_03_01)
slzg_df_avg2
as.character(na.omit(ddd$name)) == "Glockenturm"
# 6. Of course it is also possible to combine spatial operations and filters. What is
#    the average size of all buildings, which are within 1km distance to the fortress
#    (including the fortress itself)? Make a screenshot, which shows the query and
#    the result. and explain in your own words how the query works.
query_03_01 <- "SELECT AVG(ST_Area(b.geometry))" %|%
"FROM salzburg_buildings AS b," %|%
"(SELECT geometry FROM salzburg_buildings WHERE name = 'Glockenturm') AS g" %|%
"WHERE ST_Distance(b.geometry, g.geometry) < 1000;"
ddd <- read_sf(files_in[index])
as.character(na.omit(ddd$name)) == "Glockenturm"
