m1
(m1 + m3) | (m1 + m3)
(m3 + m1) | (m1 + m3)
(m3 + m1) | (m3 + m1)
(m3 + m1) | (m3 + m2)
m3
m1
m3 + m1
(m3 + m1) | (m3)
basin_me <- st_read("data/catchments_acc.shp", quiet=TRUE)
basin_me <- basin_me[which.max(st_area(basin_me)),]$geometry
basin_me <- as(basin_me, "Spatial")
flow_acc_01 <- mask(raster("data/flow_acc.sdat")*100000000, basin_me)
flow_acc_02 <- raster("data/flow_acc_nosinks.sdat")*1
flow_acc_02 <- mask(flow_acc_02, basin_me)
m1 <- mapview(flow_acc_01, na.color = "#FFFFFF00")
m2 <- mapview(flow_acc_02, na.color = "#FFFFFF00")
basin_me <- st_read("data/catchments_acc.shp", quiet=TRUE)
basin_me <- basin_me[which.max(st_area(basin_me)),]
basin_me <-st_cast(basin_me$geometry, "MULTILINESTRING")
m3 <- mapview(basin_me, color = "black", lwd = 3.5, col.regions = "black")
(m3 + m1) | (m3)
m3
m1
(m3 + m1)
library(tidyverse)
library(reticulate)
library(plotly)
library(leaflet)
library(mapview)
library(leafem)
library(raster)
library(RSAGA)
library(stars)
library(sf)
mapviewOptions(fgb = FALSE)
create_watershed_and_rivers <- function(codes) {
catchments <- read_sf("data/catchments.shp")
# basin
cselected <- catchments[catchments$HZB_CODE %in%  codes, ] %>%
st_cast("POLYGON") %>%
"["("FID")
# rivers
rivers <- read_sf("data/stream.shp") %>%
st_intersection(cselected) %>%
"["("FID")
list(basin = cselected, river = rivers)
}
map_01 <- function() {
codes <- "2  8272285 42 0 0 0 0"
results_sf <- create_watershed_and_rivers(codes = codes)
basin <- results_sf$basin
rivers <- results_sf$river
# 3. rivers
# dem_raster <- download_dem(basin)
dem_raster <- raster("data/dem.tif")
dem_raster[dem_raster <= 0] = NA
basin_polyline <- st_cast(basin$geometry, "LINESTRING")
m1 <- mapview::mapview(dem_raster, na.color = "#FFFFFF00")
m2 <- mapview::mapview(basin_polyline, color = "black", lwd = 3.5)
m3 <- mapview::mapview(rivers$geometry, color = "blue", lwd = 3.5)
m1 + m2 + m3
}
map_02 <- function() {
codes <- "2  8272285 42 0 0 0 0"
results_sf <- create_watershed_and_rivers(codes = codes)
basin <- results_sf$basin
rivers <- results_sf$river
basin_me <- st_read("data/catchments_acc.shp", quiet=TRUE)
basin_me <- basin_me[which.max(st_area(basin_me)),]
rivers_me <- st_intersection(st_zm(st_read("data/stream_acc.shp", quiet=TRUE)), basin_me)
m1 <- mapview(basin_me$geometry, color = "black", lwd = 3.5, col.regions = "black")
m2 <- mapview(rivers_me$geometry, color = "blue", lwd = 3.5)
m3 <- mapview(basin$geometry, color = "black", lwd = 3.5, col.regions = "black")
m4 <- mapview(rivers$geometry, color = "blue", lwd = 3.5)
(m1 + m2) | (m3 + m4)
}
map_03 <- function() {
basin_me <- st_read("data/catchments_acc.shp", quiet=TRUE)
basin_me <- basin_me[which.max(st_area(basin_me)),]
basin_me <-st_cast(basin_me$geometry, "MULTILINESTRING")
rivers_me <- st_intersection(st_zm(st_read("data/stream_acc.shp", quiet=TRUE)), basin_me)
time_out <- raster("data/time_out.sdat")
m1 <- mapview(basin_me, color = "black", lwd = 3.5, col.regions = "black")
m2 <- mapview(rivers_me$geometry, color = "blue", lwd = 1.5)
m3 <- mapview(time_out, na.color = "#FFFFFF00")
m1 + m2 + m3
}
map_04 <- function() {
time_out <- raster("data/time_out.sdat")
f <- hist(time_out, breaks=20)
dat <- data.frame(counts= f$counts,breaks = f$mids)
g1 <- ggplot(dat, aes(x = breaks, y = counts, fill =counts)) +
geom_bar(stat = "identity",alpha = 0.8) +
xlab("Concentration time (min)") + ylab("Frequency") +
scale_fill_gradient(low="blue", high="red") +
scale_y_continuous(expand = c(0, 0)) +
theme_classic()
ggplotly(g1)
}
map_04
source("functions.R")
map_01()
map_02()
map_03()
basin_me <- st_read("data/catchments_acc.shp", quiet=TRUE)
basin_me <- basin_me[which.max(st_area(basin_me)),]
basin_me <-st_cast(basin_me$geometry, "MULTILINESTRING")
rivers_me <- st_intersection(st_zm(st_read("data/stream_acc.shp", quiet=TRUE)), basin_me)
time_out <- raster("data/time_out.sdat")
m1 <- mapview(basin_me, color = "black", lwd = 3.5, col.regions = "black")
m2 <- mapview(rivers_me$geometry, color = "blue", lwd = 1.5)
rivers_me
rivers_me <- st_intersection(st_zm(st_read("data/stream_acc.shp", quiet=TRUE)), basin_me)
rivers_me
basin_me
rivers_me <- st_intersection(st_zm(st_read("data/stream_acc.shp", quiet=TRUE)))
st_zm(st_read("data/stream_acc.shp", quiet=TRUE))
basin_me
basin_me <- st_read("data/catchments_acc.shp", quiet=TRUE)
basin_me <- basin_me[which.max(st_area(basin_me)),]
rivers_me <- st_intersection(st_zm(st_read("data/stream_acc.shp", quiet=TRUE)), basin_me)
basin_me <-st_cast(basin_me$geometry, "MULTILINESTRING")
time_out <- raster("data/time_out.sdat")
m1 <- mapview(basin_me, color = "black", lwd = 3.5, col.regions = "black")
m2 <- mapview(rivers_me$geometry, color = "blue", lwd = 1.5)
m3 <- mapview(time_out, na.color = "#FFFFFF00")
m1 + m2 + m3
(m1 + m2 + m3) |  (m1 + m2 + m3)
(m1 + m2 + m3)
map_03 <- function() {
basin_me <- st_read("data/catchments_acc.shp", quiet=TRUE)
basin_me <- basin_me[which.max(st_area(basin_me)),]
rivers_me <- st_intersection(st_zm(st_read("data/stream_acc.shp", quiet=TRUE)), basin_me)
basin_me <-st_cast(basin_me$geometry, "MULTILINESTRING")
time_out <- raster("data/time_out.sdat")
m1 <- mapview(basin_me, color = "black", lwd = 3.5, col.regions = "black")
m2 <- mapview(rivers_me$geometry, color = "blue", lwd = 1.5)
m3 <- mapview(time_out, na.color = "#FFFFFF00")
(m1 + m2 + m3)
}
mapview::mapviewOptions(fgb = FALSE)
map_03()
mapview::mapviewOptions(fgb = FALSE)
map_04()
time_out <- raster("data/time_out.sdat")
f <- hist(time_out, breaks=20)
time_out
f <- hist.default(time_out, breaks=20)
f <- hist(time_out, breaks=20)
time_out <- raster("data/time_out.sdat")
f <- hist(time_out, breaks=20)
f
time_out <- raster("data/time_out.sdat")
f <- hist(time_out, breaks=20)
time_out
f <- hist(getValues(time_out), breaks=20)
time_out <- raster("data/time_out.sdat")
hist(getValues(time_out), breaks=20)
f
f <- invisible(hist(getValues(time_out), breaks=20))
f <- dev.off(hist(getValues(time_out), breaks=20))
f <- hist(getValues(time_out), breaks=20)
time_out <- raster("data/time_out.sdat")
f <- hist(getValues(time_out), breaks=20, plot = FALSE)
dat <- data.frame(counts= f$counts,breaks = f$mids)
g1 <- ggplot(dat, aes(x = breaks, y = counts, fill =counts)) +
geom_bar(stat = "identity",alpha = 0.8) +
xlab("Concentration time (min)") + ylab("Frequency") +
scale_fill_gradient(low="blue", high="red") +
scale_y_continuous(expand = c(0, 0)) +
theme_classic()
ggplotly(g1)
basin_me <- st_read("data/catchments_acc.shp", quiet=TRUE)
basin_me <- basin_me[which.max(st_area(basin_me)),]$geometry
basin_me <- as(basin_me, "Spatial")
flow_acc_01 <- mask(raster("data/flow_acc.sdat")*100000000, basin_me)
flow_acc_01[flow_acc_01 < 100] <- NA
flow_acc_02 <- raster("data/flow_acc_nosinks.sdat")*1
flow_acc_02 <- mask(flow_acc_02, basin_me)
flow_acc_01
flow_acc_02 <- raster("data/flow_acc_nosinks.sdat")*1
flow_acc_02 <- mask(flow_acc_02, basin_me)
flow_acc_02[flow_acc_02 < 3] <- NA
m1 <- mapview(flow_acc_01, na.color = "#FFFFFF00")
m2 <- mapview(flow_acc_02, na.color = "#FFFFFF00")
basin_me <- st_read("data/catchments_acc.shp", quiet=TRUE)
basin_me <- basin_me[which.max(st_area(basin_me)),]
basin_me <-st_cast(basin_me$geometry, "MULTILINESTRING")
m3 <- mapview(basin_me, color = "black", lwd = 3.5, col.regions = "black")
(m3 + m1
(m3 + m1)
(m3 + m1) | (m3)
m3
m1
m1
flow_acc_01
rasterToPolygons(flow_acc_01)
m1 <- mapview(rasterToPolygons(flow_acc_01), na.color = "#FFFFFF00")
m1
flow_acc_01_poly <- rasterToPolygons(flow_acc_01)
flow_acc_01_poly
plot(flow_acc_01_poly)
flow_acc_01_poly
flow_acc_01_poly
plot(st_union(flow_acc_01_poly))
st_union(flow_acc_01_poly)
flow_acc_01_poly
plot(st_union(st_as_sf()))
plot(st_union(st_as_sf(flow_acc_01_poly)))
flow_acc_01_poly <- st_union(st_as_sf(rasterToPolygons(flow_acc_01)))
m1 <- mapview(flow_acc_01_poly, na.color = "#FFFFFF00")
m1
flow_acc_02
flow_acc_02 <- raster("data/flow_acc_nosinks.sdat")*1
flow_acc_02 <- mask(flow_acc_02, basin_me)
flow_acc_02[flow_acc_02 < 3] <- NA
flow_acc_02_poly <- st_union(st_as_sf(rasterToPolygons(flow_acc_02)))
m2 <- mapview(flow_acc_02_poly, na.color = "#FFFFFF00")
m2
(m3 + m1) | (m3 + m1)
(m3 + m1) | (m3 + m2)
flow_acc_01_poly
flow_acc_01_poly
flow_acc_01_poly <- st_union(st_as_sf(rasterToPolygons(flow_acc_01)))
flow_acc_01_poly
flow_acc_01_poly
st_cast(flow_acc_01_poly, "POLYGON")
st_cast(st_cast(flow_acc_01_poly, "POLYGON"), "LINESTRING")
plot(st_cast(st_cast(flow_acc_01_poly, "POLYGON"), "LINESTRING"))
mapview(st_cast(st_cast(flow_acc_01_poly, "POLYGON"), "LINESTRING"))
basin_me <- st_read("data/catchments_acc.shp", quiet=TRUE)
basin_me
flow_acc_01 <- st_read("data/stream.shp")
flow_acc_01
mapview(flow_acc_01)
flow_acc_01 <- st_read("data/stream_acc.shp")
mapview(flow_acc_01)
flow_acc_01 <- st_read("data/stream_acc.shp")
flow_acc_02 <- st_read("data/stream_acc_nosinks.shp")
mapview(flow_acc_02)
st_intersection(flow_acc_01, basin_me)
flow_acc_01
basin_me
basin_me <- st_read("data/catchments_acc.shp", quiet=TRUE)
basin_me <- basin_me[which.max(st_area(basin_me)),]$geometry
basin_me <- st_read("data/catchments_acc.shp", quiet=TRUE)
basin_me <- basin_me[which.max(st_area(basin_me)),]$geometry
basin_me
flow_acc_01 <- st_read("data/stream_acc.shp")
st_intersection(flow_acc_01, basin_me)
basin_me
flow_acc_01
st_intersection(st_zm(flow_acc_01), basin_me)
flow_acc_01 <- st_read("data/stream_acc.shp")
flow_acc_01 <-st_intersection(st_zm(flow_acc_01), basin_me)
mapview(flow_acc_01)
flow_acc_02 <- st_read("data/stream_acc_nosinks.shp")
flow_acc_02 <-st_intersection(st_zm(flow_acc_02), basin_me)
mapview(flow_acc_01)
mapview(flow_acc_02)
mapview(flow_acc_02, zcol = "Length")
flow_acc_02
flow_acc_02$Length * 111111
flow_acc_02$Length <- flow_acc_02$Length * 111111
mapview(flow_acc_02, zcol = "Length")
flow_acc_01
flow_acc_01$LENGTH <- flow_acc_01$LENGTH * 111111
mapview(flow_acc_02, zcol = "Length")
flow_acc_01 <- st_read("data/stream_acc.shp")
flow_acc_01 <-st_intersection(st_zm(flow_acc_01), basin_me)
flow_acc_01$LENGTH <- flow_acc_01$LENGTH * 111111
mapview(flow_acc_01, zcol = "Length")
flow_acc_01
mapview(flow_acc_01, zcol = "LENGTH")
flow_acc_02 <- st_read("data/stream_acc_nosinks.shp")
flow_acc_02 <-st_intersection(st_zm(flow_acc_02), basin_me)
flow_acc_02$Length <- flow_acc_02$Length * 111111
mapview(flow_acc_02, zcol = "Length")
mapview(flow_acc_02, zcol = "Length")
mapview(flow_acc_01, zcol = "LENGTH")
mapview(flow_acc_02, zcol = "Length")
m1 <- mapview(flow_acc_01, zcol = "LENGTH")
m2 <- mapview(flow_acc_02, zcol = "Length")
basin_me <- st_read("data/catchments_acc.shp", quiet=TRUE)
basin_me <- basin_me[which.max(st_area(basin_me)),]
basin_me <-st_cast(basin_me$geometry, "MULTILINESTRING")
m3 <- mapview(basin_me, color = "black", lwd = 3.5, col.regions = "black")
m3
(m3 + m1) | (m3 + m2)
m2 <- mapview(flow_acc_02$geometry)
(m3 + m1) | (m3 + m2)
m4 <- (m3 + m1) | (m3 + m2)
m4
map_05 <- function() {
basin_me <- st_read("data/catchments_acc.shp", quiet=TRUE)
basin_me <- basin_me[which.max(st_area(basin_me)),]$geometry
flow_acc_01 <- st_read("data/stream_acc.shp")
flow_acc_01 <-st_intersection(st_zm(flow_acc_01), basin_me)
flow_acc_01$LENGTH <- flow_acc_01$LENGTH * 111111
m1 <- mapview(flow_acc_01, zcol = "LENGTH")
flow_acc_02 <- st_read("data/stream_acc_nosinks.shp")
flow_acc_02 <-st_intersection(st_zm(flow_acc_02), basin_me)
flow_acc_02$Length <- flow_acc_02$Length * 111111
m2 <- mapview(flow_acc_02$geometry)
basin_me <- st_read("data/catchments_acc.shp", quiet=TRUE)
basin_me <- basin_me[which.max(st_area(basin_me)),]
basin_me <-st_cast(basin_me$geometry, "MULTILINESTRING")
m3 <- mapview(basin_me, color = "black", lwd = 3.5, col.regions = "black")
m4 <- (m3 + m1) | (m3 + m2)
m4
}
tanya_bro <- c("2  8272113  5 8 0 0 0",
"2  8272113  5 6 0 0 0",
"2  8272113  5 2 0 0 0",
"2  8272113  5 7 0 0 0",
"2  8272113  5 3 0 0 0",
"2  8272113  5 5 0 0 0",
"2  8272113  5 4 0 0 0",
"2  8272113  5 7 0 0 0",
"2  8272113  5 1 0 0 0",
"2  8272113  5 9 0 0 0")
create_watershed_and_rivers(tanya_bro)
plot(create_watershed_and_rivers(tanya_bro))
create_watershed_and_rivers(tanya_bro)
tanya_bro <- c("2  8272113  5 8 0 0 0",
"2  8272113  5 6 0 0 0",
"2  8272113  5 2 0 0 0",
"2  8272113  5 7 0 0 0",
"2  8272113  5 3 0 0 0",
"2  8272113  5 5 0 0 0",
"2  8272113  5 4 0 0 0",
"2  8272113  5 7 0 0 0",
"2  8272113  5 1 0 0 0",
"2  8272113  5 9 0 0 0")
bro_tanya <- create_watershed_and_rivers(tanya_bro)
plot(bro_tanya$basin)
plot(bro_tanya$river)
st_write(bro_tanya$river, "/home/csaybar/tanya/river.shp")
st_write(bro_tanya$basin, "/home/csaybar/tanya/basin.shp")
dem_ <- raster("/home/csaybar/austria_dem10_wgs84.tif")
crop(dem_, bro_tanya$basin)
writeRaster(crop(dem_, bro_tanya$basin), "/home/csaybar/tanya/dem_tanya.tif")
library(rgee)
ee_Initialize(drive = TRUE)
# Load the study area
study_region <- ee$FeatureCollection("users/sapienza_at/mosul_study_area")
# Define the image Collection to use
BaseColl <- ee$ImageCollection("LANDSAT/LT05/C01/T1_TOA")
# Define the Bands needed for the NDWI
L5bands <- c("B2", "B5")
# Define a string to use in the name of each image
area <- ee$String("mos_NDWI_")
# Create a list of dates
start <- ee$Date$fromYMD(1984, 01, 01)
years <- ee$List$sequence(0, 15)
# Crashing HERE
startDates <- years$map(function(x) {
return(start$advance(x, "year"))
})
print("Start dates", startDates)
# Crashing HERE
startDates <- years$map(function(x) {
return(start$advance(x, "year"))
})
ee_utils_pyfunc(function(x) {
return(start$advance(x, "year"))
})
startDates <- years$map(ee_utils_pyfunc(
function(x) start$advance(x, "year")
)
)
# Crashing HERE
startDates <- years$map(ee_utils_pyfunc(
function(x) start$advance(x, "year")
)
)
print("Start dates", startDates)
startDates
print("Start dates", startDates)
startDates
startDates
startDates
eedate_to_rdate(startDates)
# Crashing HERE
startDates <- years$map(ee_utils_pyfunc(
function(x) start$advance(x, "year")
)
)
# Set the desired cloud filter
cloud_filter <- ee$Filter$lt("CLOUD_COVER", 0.1)
# Function to maks clouds from the QA band in lansat images
maskLandsatclouds <- function(image) {
qa <- image$select("BQA")
cloudBitMask <- ee$Number(2)$pow(4)$int()
mask <- qa$bitwiseAnd(cloudBitMask)$eq(0)
return(image.updateMask(mask))$
select("B.*")$
copyProperties(image, ("system:time_start"))
}
# Function to generate and NDWI band
getNDWI <- function(img) {
NDWI <- img$normalizedDifference(L5bands)$rename("NDWI")
return(NDWI)
}
# Function to generate NDWI mosaics for each year
yearmap <- function(m){
start <- ee$Date(m)
end <- ee$Date(m)$advance(1,"year")
date_range <- ee$DateRange(start,end)
name <- area$cat(start$format("YYYY"))$cat(sensor)
ImgYear <- BaseColl$
filterDate(date_range)$
filterBounds(study_region)$
filter(cloud_filter)$
map(maskLandsatclouds)$
map(getNDWI)$
map(function(img){return(img$clip(study_region))})
return(ImgYear$median()$set({name: name}))
}
# Map the function over the list of date
list_of_images <- startDates$map(yearmap)
# Function to generate NDWI mosaics for each year
yearmap <- function(m){
start <- ee$Date(m)
end <- ee$Date(m)$advance(1,"year")
date_range <- ee$DateRange(start,end)
name <- area$cat(start$format("YYYY"))$cat(sensor)
ImgYear <- BaseColl$
filterDate(date_range)$
filterBounds(study_region)$
filter(cloud_filter)$
map(maskLandsatclouds)$
map(getNDWI)$
map(function(img){return(img$clip(study_region))})
return(ImgYear$median()$set({name: name}))
}
# Function to generate NDWI mosaics for each year
yearmap <- function(m){
start <- ee$Date(m)
end <- ee$Date(m)$advance(1,"year")
date_range <- ee$DateRange(start,end)
name <- area$cat(start$format("YYYY"))$cat(sensor)
ImgYear <- BaseColl$
filterDate(date_range)$
filterBounds(study_region)$
filter(cloud_filter)$
map(maskLandsatclouds)$
map(getNDWI)$
map(function(img){return(img$clip(study_region))})
return(ImgYear$median()$set({name: name}))
}
yearmap
startDates
# Map the function over the list of date
list_of_images <- startDates$map(ee_utils_pyfunc(yearmap))
yearmap
# Function to generate NDWI mosaics for each year
yearmap <- function(m){
start <- ee$Date(m)
end <- ee$Date(m)$advance(1,"year")
date_range <- ee$DateRange(start,end)
name <- area$cat(start$format("YYYY"))$cat(sensor)
ImgYear <- BaseColl$
filterDate(date_range)$
filterBounds(study_region)$
filter(cloud_filter)$
map(maskLandsatclouds)$
map(getNDWI)$
map(function(img){return(img$clip(study_region))})
return(ImgYear$median()$set(list(name = name)))
}
# Map the function over the list of date
list_of_images <- startDates$map(ee_utils_pyfunc(yearmap))
yearmap
return(ImgYear$median()$set(list(name = name)))
# Function to generate NDWI mosaics for each year
yearmap <- function(m){
start <- ee$Date(m)
end <- ee$Date(m)$advance(1,"year")
date_range <- ee$DateRange(start,end)
name <- area$cat(start$format("YYYY"))$cat(sensor)
ImgYear <- BaseColl$
filterDate(date_range)$
filterBounds(study_region)$
filter(cloud_filter)$
map(maskLandsatclouds)$
map(getNDWI)$
map(function(img){return(img$clip(study_region))})
return(ImgYear$median()$set(list(name = name)))
}
yearmap
# Function to generate NDWI mosaics for each year
yearmap <- function(m){
start <- ee$Date(m)
end <- ee$Date(m)$advance(1,"year")
date_range <- ee$DateRange(start,end)
name <- area$cat(start$format("YYYY"))$cat(sensor)
ImgYear <- BaseColl$
filterDate(date_range)$
filterBounds(study_region)$
filter(cloud_filter)$
map(maskLandsatclouds)$
map(getNDWI)$
map(function(img){return(img$clip(study_region))})
return(ImgYear$median()$set(list(name = name)))
}
# Map the function over the list of date
list_of_images <- startDates$map(ee_utils_pyfunc(yearmap))
ee_utils_pyfunc(yearmap)
# Map the function over the list of date
list_of_images <- startDates$map(ee_utils_pyfunc(yearmap))
