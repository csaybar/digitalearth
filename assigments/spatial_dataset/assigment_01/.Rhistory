library(reticulate)
knitr::opts_chunk$set(echo = TRUE, eval=TRUE)
py$html_string
library(htmltools)
py$html_string
py$html_string
rmarkdown::render(py$html_string)
rmarkdown::render_site(py$html_string)
htmlwidgets::onRender(py$html_string)
htmlwidgets::viewer
viewer(py$html_string)
shiny::viewer(py$html_string)
py$html_string
View(py$html_string)
py$html_string
py$html_string
py$html_string
renderDocument(py$html_string)
py$html_string
knitr::render_html(py$html_string)
knitr::render_html()
rmarkdown::render(py$html_string)
py$html_string
tempfile()
sprintf(tempfile(),".html")
sprintf("%s.html", tempfile())
sprintf("%s.html", tempfile())
py$html_string
save_html(py$html_string)
save_html(py$html_string, sprintf("%s.html", tempfile()))
myfile <- sprintf("%s.html", tempfile())
save_html(py$html_string, myfile)
rmarkdown::render(myfile)
myfile <- sprintf("%s.html", tempfile())
save_html(py$html_string, myfile)
rmarkdown::render(myfile)
reticulate::repl_python()
reticulate::repl_python()
create_sf <- function() {
data("meuse")
coordinates(meuse) <- ~x + y
crs(meuse) <- st_crs(28992)$proj4string
meuse %>%
st_as_sf() %>%
st_transform(4326) %>%
as("Spatial")
}
mapview(create_sf())
library(mapview)
mapview(create_sf())
create_sf <- function() {
data("meuse")
coordinates(meuse) <- ~x + y
crs(meuse) <- st_crs(28992)$proj4string
meuse %>%
st_as_sf() %>%
st_transform(4326) %>%
as("Spatial")
}
mapview(create_sf())
library(sp)
library(sf)
library(gstat)
library(gstat)
library(leaflet)
library(raster)
library(mapview)
source("functions.R")
create_sf <- function() {
data("meuse")
coordinates(meuse) <- ~x + y
crs(meuse) <- st_crs(28992)$proj4string
meuse %>%
st_as_sf() %>%
st_transform(4326) %>%
as("Spatial")
}
mapview(create_sf())
create_sf <- function() {
data("meuse")
coordinates(meuse) <- ~x + y
crs(meuse) <- st_crs(28992)$proj4string
meuse %>%
st_as_sf() %>%
st_transform(4326) %>%
as("Spatial")
}
m1 <- mapview(meuse, layer.name = "meuse")
m1@map
meuse %>%
st_as_sf() %>%
st_transform(4326) %>%
as("Spatial")
create_sf <- function() {
data("meuse")
coordinates(meuse) <- ~x + y
crs(meuse) <- st_crs(28992)$proj4string
meuse %>%
st_as_sf() %>%
st_transform(4326) %>%
as("Spatial")
}
m1 <- mapview(meuse, layer.name = "meuse")
meuse <- create_sf()
m1 <- mapview(meuse, layer.name = "meuse")
m1@map
meuse <- create_sf()
m1 <- mapview(meuse)
m1@map
m1@map
m1 <- mapview(meuse, zcol = "dist")
m1@map
mapviewGetOption("legend")
m1 <- mapview(
x = meuse,
zcol = "dist",
legend = TRUE
)
m1
library(sp)
library(sf)
library(gstat)
library(leaflet)
library(raster)
library(mapview)
source("functions.R")
m1@map
mapview(meuse)
mapview(meuse,cex=10)
mapview(meuse,cex=7)
library(rayshader)
library(elevatr)
library(magrittr)
install.packages("rayshader")
devtools::install_github("tylermorganwall/rayshader")
devtools::install_github("tylermorganwall/rayshader")
library(rayshader)
library(elevatr)
library(magrittr)
install.packages("elevatr}")
install.packages("elevatr")
library(rayshader)
library(elevatr)
library(magrittr)
library(rayshader)
library(elevatr)
library(magrittr)
#or from the elevatr package
elevation <- get_elev_raster(lake, z = 11, src = "aws")
elevation
elmat2 = matrix(raster::extract(elevation,raster::extent(elevation)),
nrow=ncol(elevation),ncol=nrow(elevation))
elmat2
elmat2 %>%
sphere_shade() %>%
add_water(detect_water(elmat2)) %>%
plot_map()
elmat2 %>%
sphere_shade() %>%
add_water(detect_water(elmat2)) %>%
plot_map()
elmat2 %>%
sphere_shade() %>%
add_water(detect_water(elmat)) %>%
add_shadow(ray_shade(elmat,lambert=FALSE)) %>%
add_shadow(lamb_shade(elmat)) %>%
add_shadow(ambient_shade(elmat)) %>%
plot_map()
elmat %>%
sphere_shade() %>%
add_water(detect_water(elmat)) %>%
add_shadow(ray_shade(elmat,lambert=FALSE)) %>%
add_shadow(lamb_shade(elmat)) %>%
add_shadow(ambient_shade(elmat)) %>%
plot_map()
#Here, I load a map with the raster package.
loadzip = tempfile()
library(rayshader)
#Here, I load a map with the raster package.
loadzip = tempfile()
download.file("https://tylermw.com/data/dem_01.tif.zip", loadzip)
localtif = raster::raster(unzip(loadzip, "dem_01.tif"))
unlink(loadzip)
#And convert it to a matrix:
elmat = raster_to_matrix(localtif)
elmat
#We use another one of rayshader's built-in textures:
elmat %>%
sphere_shade(texture = "desert") %>%
plot_map()
elmat %>%
sphere_shade(sunangle = 45, texture = "desert") %>%
plot_map()
#detect_water and add_water adds a water layer to the map:
elmat %>%
sphere_shade(texture = "desert") %>%
add_water(detect_water(elmat), color = "desert") %>%
plot_map()
elmat %>%
sphere_shade(texture = "desert") %>%
add_water(detect_water(elmat), color = "desert") %>%
add_shadow(ray_shade(elmat, zscale = 3), 0.5) %>%
add_shadow(ambient_shade(elmat), 0) %>%
plot_3d(elmat, zscale = 10, fov = 0, theta = 135, zoom = 0.75, phi = 45, windowsize = c(1000, 800))
Sys.sleep(0.2)
render_snapshot()
elmat %>%
sphere_shade(texture = "desert") %>%
add_water(detect_water(elmat), color = "desert") %>%
add_shadow(ray_shade(elmat, zscale = 3), 0.5) %>%
add_shadow(ambient_shade(elmat), 0) %>%
plot_3d(elmat, zscale = 10, fov = 0, theta = 135, zoom = 0.75, phi = 45, windowsize = c(1000, 800))
render_snapshot()
lmat %>%
sphere_shade(texture = "desert") %>%
add_water(detect_water(elmat), color = "desert") %>%
plot_3d(elmat, zscale = 10, fov = 0, theta = 60, zoom = 0.75, phi = 45, windowsize = c(1000, 800))
elmat %>%
sphere_shade(texture = "desert") %>%
add_water(detect_water(elmat), color = "desert") %>%
plot_3d(elmat, zscale = 10, fov = 0, theta = 60, zoom = 0.75, phi = 45, windowsize = c(1000, 800))
render_scalebar(limits=c(0, 5, 10),label_unit = "km",position = "W", y=50,
scale_length = c(0.33,1))
render_compass(position = "E")
Sys.sleep(0.2)
render_highquality(samples=200, scale_text_size = 24,clear=TRUE)
install.packages("rayrender")
elmat %>%
sphere_shade(texture = "desert") %>%
add_water(detect_water(elmat), color = "desert") %>%
plot_3d(elmat, zscale = 10, fov = 0, theta = 60, zoom = 0.75, phi = 45, windowsize = c(1000, 800))
render_scalebar(limits=c(0, 5, 10),label_unit = "km",position = "W", y=50,
scale_length = c(0.33,1))
elmat %>%
sphere_shade(texture = "desert") %>%
add_water(detect_water(elmat), color = "desert") %>%
plot_3d(elmat, zscale = 10, fov = 0, theta = 60, zoom = 0.75, phi = 45, windowsize = c(1000, 800))
elmat %>%
sphere_shade(texture = "desert") %>%
add_water(detect_water(elmat), color = "desert") %>%
plot_3d(elmat, zscale = 10, fov = 0, theta = 60, zoom = 0.75, phi = 45, windowsize = c(1000, 800))
render_scalebar(limits=c(0, 5, 10),label_unit = "km",position = "W", y=50,
scale_length = c(0.33,1))
render_compass(position = "E")
Sys.sleep(0.2)
render_highquality(samples=200, scale_text_size = 24,clear=TRUE)
install.packages("magick")
install.packages("magick")
elmat %>%
sphere_shade(texture = "desert") %>%
add_water(detect_water(elmat), color = "desert") %>%
plot_3d(elmat, zscale = 10, fov = 0, theta = 60, zoom = 0.75, phi = 45, windowsize = c(1000, 800))
render_scalebar(limits=c(0, 5, 10),label_unit = "km",position = "W", y=50,
scale_length = c(0.33,1))
render_compass(position = "E")
Sys.sleep(0.2)
render_highquality(samples=200, scale_text_size = 24,clear=TRUE)
library("RPostgreSQL")
source("../postgis/utils.R") # Utils to use POSTGIS with R!
setwd("/home/csaybar/Documents/Github/digitalearth/assigments/spatial_dataset/assigment_01/")
source("../postgis/utils.R") # Utils to use POSTGIS with R!
library("RPostgreSQL")
source("../postgis/utils.R") # Utils to use POSTGIS with R!
# 1. load the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
library("RPostgreSQL")
source("../postgis/utils.R") # Utils to use POSTGIS with R!
# 1. load the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# 2. create a connection to the postgres database
con <- RPostgreSQL::dbConnect(
drv = drv,
dbname = "martinsudmanns_dynamic_salzburg",
host = "postgresql-martinsudmanns.alwaysdata.net",
user = "martinsudmanns_postgres",
password = "its-db-time!",
port = 5432
)
con
con
DBI
DBI::dbListTables(con)
DBI::dbListTables(con)
library("RPostgreSQL")
source("../postgis/utils.R") # Utils to use POSTGIS with R!
# 1. load the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# 2. create a connection to the postgres database
con <- RPostgreSQL::dbConnect(
drv = drv,
dbname = "martinsudmanns_dynamic_salzburg",
host = "postgresql-martinsudmanns.alwaysdata.net",
user = "martinsudmanns_postgres",
password = "its-db-time!",
port = 5432
)
library("RPostgreSQL")
source("../postgis/utils.R") # Utils to use POSTGIS with R!
# 1. load the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# 2. create a connection to the postgres database
con <- RPostgreSQL::dbConnect(
drv = drv,
dbname = "martinsudmanns_dynamic_salzburg",
host = "postgresql-martinsudmanns.alwaysdata.net",
user = "martinsudmanns_postgres",
password = "its-db-time!",
port = 5432
)
library("RPostgreSQL")
source("../postgis/utils.R") # Utils to use POSTGIS with R!
# 1. load the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# 2. create a connection to the postgres database
con <- RPostgreSQL::dbConnect(
drv = drv,
dbname = "martinsudmanns_dynamic_salzburg",
host = "postgresql-martinsudmanns.alwaysdata.net",
user = "martinsudmanns_postgres",
password = "its-db-time!",
port = 5432
)
library("RPostgreSQL")
source("../postgis/utils.R") # Utils to use POSTGIS with R!
# 1. load the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# 2. create a connection to the postgres database
con <- RPostgreSQL::dbConnect(
drv = drv,
dbname = "spdb_course",
host = "localhost",
user = "csaybar",
password = "lesly",
port = 5432
)
# 2. create a connection to the postgres database
con <- RPostgreSQL::dbConnect(
drv = drv,
dbname = "spdb_course",
host = "localhost",
user = "csaybar",
password = "csaybar",
port = 5432
)
# 1. load the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# 2. create a connection to the postgres database
con <- RPostgreSQL::dbConnect(
drv = drv,
dbname = "spdb_course",
host = "localhost",
user = "csaybar",
password = "csaybar",
port = 5432
)
# 2. create a connection to the postgres database
con <- RPostgreSQL::dbConnect(
drv = drv,
dbname = "spdb_course",
host = "localhost",
user = "csaybar",
password = "lesly",
port = 5432
)
# 2. create a connection to the postgres database
con <- RPostgreSQL::dbConnect(
drv = drv,
dbname = "spdb_course",
host = "localhost",
user = "csaybar",
password = "lesly",
port = 5433
)
# 2. create a connection to the postgres database
con <- RPostgreSQL::dbConnect(
drv = drv,
dbname = "spdb_course",
host = "localhost",
user = "csaybar",
password = "csaybar",
port = 5433
)
# 2. create a connection to the postgres database
con <- RPostgreSQL::dbConnect(
drv = drv,
dbname = "spdb_course",
host = "localhost",
user = "csaybar",
password = "csaybar",
port = 5433
)
# 2. create a connection to the postgres database
con <- RPostgreSQL::dbConnect(
drv = drv,
dbname = "spdb_course",
host = "localhost",
user = "csaybar",
password = "lesly",
port = 5433
)
# 2. create a connection to the postgres database
con <- RPostgreSQL::dbConnect(
drv = drv,
dbname = "spdb_course",
host = "localhost",
user = "csaybar",
password = "csaybar",
port = 5433
)
